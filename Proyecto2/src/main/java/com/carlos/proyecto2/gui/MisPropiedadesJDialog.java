/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto2.gui;
import com.carlos.proyecto2.Casillas.*;
import com.carlos.proyecto2.Jugador.*;
import javax.swing.JOptionPane;

/**
 *
 * @author benjamin
 */
public class MisPropiedadesJDialog extends javax.swing.JDialog {
    private ListaCasilla casillasDeLaPartida;
    private ListaJugadores jugadoresDeLaPartida;
    private Jugador jugadorDelTurno;
    private float porcentajeHipoteca;
    /**
     * Creates new form MisPropiedadesJDialog
     */
    public MisPropiedadesJDialog(java.awt.Frame parent, boolean modal,ListaJugadores jugadoresPartida,ListaCasilla casillasDeLaPartida, Jugador jugadorDelTurno,float porcentajeHipoteca) {
        super(parent,"Mis Propiedades",modal);
        this.jugadorDelTurno=jugadorDelTurno;
        this.casillasDeLaPartida=casillasDeLaPartida;
        this.jugadoresDeLaPartida=jugadoresPartida;
        this.porcentajeHipoteca=porcentajeHipoteca;
        initComponents();
        agregarPropiedades();
        agregarJugadores();
        verificarPropiedades();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        PropiedadesjComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        compañeroDeJuegojComboBox = new javax.swing.JComboBox<>();
        CerrarjButton = new javax.swing.JButton();
        realizarTransaccionjButton = new javax.swing.JButton();
        PropiedadesjComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        CantidadDeHotelesjLabel = new javax.swing.JLabel();
        CostoEstanciajLabel = new javax.swing.JLabel();
        CantidadDeCasasjLabel = new javax.swing.JLabel();
        CostoAumentadoHoteljLabel = new javax.swing.JLabel();
        CostoAumentadoCasajLabel = new javax.swing.JLabel();
        GrupoPropiedadjLabel = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        PrecioCasajLabel = new javax.swing.JLabel();
        PrecioHoteljLabel = new javax.swing.JLabel();
        CostoServiciojLabel = new javax.swing.JLabel();
        CostoUsoEstacionjLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        EstadoHipotecajLabel = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        HipotecarjButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        CostoHipotecajLabel = new javax.swing.JLabel();
        PagarHipotecajButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mis Propiedades ");

        jLabel2.setText("Mis Propiedades");

        jLabel3.setText("Compañeros de juego");

        CerrarjButton.setText("Cerrar Ventana");
        CerrarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarjButtonActionPerformed(evt);
            }
        });

        realizarTransaccionjButton.setText("Realizar Transaccion");
        realizarTransaccionjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realizarTransaccionjButtonActionPerformed(evt);
            }
        });

        PropiedadesjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PropiedadesjComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Propiedad Lugar");

        jLabel5.setText("Cantidad De Hoteles:");

        jLabel6.setText("Cantidad de Casas:");

        jLabel7.setText("Costo Estancia:");

        jLabel8.setText("Costo Estancia aumentado por cada Hotel:");

        jLabel9.setText("Costo Estancia aumentado por cada Casa:");

        jLabel10.setText("Grupo de propiedades a la que pertenece:");

        jLabel11.setText("Propiedad Servicio Basico");

        jLabel12.setText("Propiedad Estacion");

        jLabel13.setText("Costo de Servicio:");

        jLabel14.setText("Costo Uso Estacion:");

        CantidadDeHotelesjLabel.setText("0");

        CostoEstanciajLabel.setText("0");

        CantidadDeCasasjLabel.setText("0");

        CostoAumentadoHoteljLabel.setText("0");

        CostoAumentadoCasajLabel.setText("0");

        GrupoPropiedadjLabel.setText("0");

        jLabel15.setText("Precio Casa:");

        jLabel16.setText("Precio Hotel");

        PrecioCasajLabel.setText("0");

        PrecioHoteljLabel.setText("0");

        CostoServiciojLabel.setText("0");

        CostoUsoEstacionjLabel.setText("0");

        jLabel17.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Vender Propiedades");

        jLabel18.setText("Estado Hipoteca:");

        EstadoHipotecajLabel.setText("No hipotecada");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("ESTADO GENERAL PROPIEDAD");

        HipotecarjButton.setText("HIPOTECAR");
        HipotecarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HipotecarjButtonActionPerformed(evt);
            }
        });

        jLabel20.setText("Costo Hipoteca:");

        CostoHipotecajLabel.setText("0");

        PagarHipotecajButton.setText("Pagar Hipoteca");
        PagarHipotecajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PagarHipotecajButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(176, 176, 176)
                .addComponent(jLabel4)
                .addGap(237, 237, 237)
                .addComponent(jLabel11))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(PropiedadesjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CantidadDeHotelesjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CantidadDeCasasjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(280, 280, 280)
                .addComponent(jLabel13)
                .addGap(16, 16, 16)
                .addComponent(CostoServiciojLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jLabel7)
                .addGap(51, 51, 51)
                .addComponent(CostoEstanciajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(HipotecarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jLabel8)
                .addGap(16, 16, 16)
                .addComponent(CostoAumentadoHoteljLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(jLabel12))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(PagarHipotecajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CostoAumentadoCasajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GrupoPropiedadjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(150, 150, 150)
                .addComponent(jLabel14)
                .addGap(15, 15, 15)
                .addComponent(CostoUsoEstacionjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PrecioCasajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PrecioHoteljLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(228, 228, 228)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(650, 650, 650)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(EstadoHipotecajLabel))
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(273, 273, 273)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(CostoHipotecajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addGap(119, 119, 119)
                .addComponent(jLabel3))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PropiedadesjComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(compañeroDeJuegojComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(realizarTransaccionjButton)))
                .addGap(263, 263, 263)
                .addComponent(CerrarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11))))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CantidadDeHotelesjLabel)
                        .addGap(16, 16, 16)
                        .addComponent(CantidadDeCasasjLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PropiedadesjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(CostoServiciojLabel))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(CostoEstanciajLabel))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(HipotecarjButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(CostoAumentadoHoteljLabel)
                            .addComponent(jLabel12))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(PagarHipotecajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel9)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(CostoAumentadoCasajLabel)
                        .addGap(6, 6, 6)
                        .addComponent(GrupoPropiedadjLabel))
                    .addComponent(jLabel14)
                    .addComponent(CostoUsoEstacionjLabel))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PrecioCasajLabel)
                        .addGap(6, 6, 6)
                        .addComponent(PrecioHoteljLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel19)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addComponent(EstadoHipotecajLabel))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(CostoHipotecajLabel))))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PropiedadesjComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compañeroDeJuegojComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(realizarTransaccionjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(CerrarjButton))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CerrarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarjButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_CerrarjButtonActionPerformed

    private void PropiedadesjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PropiedadesjComboBoxActionPerformed
        //SE EXTRAE EL NOMBRE DE LA PROPIEDAD Y SE BUSCA EN LA LISTA DEL TABLERO Y MUSTRA LAS CARRACTERISTICAS EN PANTALLA 
        String nombreCasillaSeleccionada = (String)PropiedadesjComboBox.getSelectedItem();
        Casillas casillaVerificar = this.casillasDeLaPartida.retornarCasilla(nombreCasillaSeleccionada);
        //VERIFIACR LA INSTANCIA DE ORIGEN DEL OBJETO
        if(casillaVerificar instanceof CasillaPropiedadLugar)
        {
            int numeroDeCasas = ((CasillaPropiedadLugar) casillaVerificar).getCantidadCasas();
            int numeroDeHoteles = ((CasillaPropiedadLugar) casillaVerificar).getCantidadHoteles();
            float cantidaAumentadaHoteles = ((CasillaPropiedadLugar) casillaVerificar).getCostoEstanciaAumentadoCadaHotel();
            float cantidadAumentadaCasas = ((CasillaPropiedadLugar) casillaVerificar).getCostoEstanciaAumentadoCadaCasa();
            String grupoPropiedad = ((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad();
            float precioCasa= ((CasillaPropiedadLugar) casillaVerificar).getPrecioCasa();
            float precioHotel=((CasillaPropiedadLugar) casillaVerificar).getPrecioHotel();
            float costoEstancia = ((CasillaPropiedadLugar) casillaVerificar).getCostoEstancia();
            this.CantidadDeCasasjLabel.setText(String.valueOf(numeroDeCasas));
            this.CantidadDeHotelesjLabel.setText(String.valueOf(numeroDeHoteles));
            this.CostoAumentadoCasajLabel.setText(String.valueOf(cantidadAumentadaCasas));
            this.CostoAumentadoHoteljLabel.setText(String.valueOf(cantidaAumentadaHoteles));
            this.GrupoPropiedadjLabel.setText(grupoPropiedad);
            this.PrecioCasajLabel.setText(String.valueOf(precioCasa));
            this.PrecioHoteljLabel.setText(String.valueOf(precioHotel));
            this.CostoEstanciajLabel.setText(String.valueOf(costoEstancia));
            //
            this.CostoUsoEstacionjLabel.setText("0");
            this.CostoServiciojLabel.setText("0");
            //
        }
        if(casillaVerificar instanceof CasillaPropiedadEstacion)
        {
            float costoEstacion = ((CasillaPropiedadEstacion) casillaVerificar).getCostoUsoEstacion();
            //
            this.CantidadDeCasasjLabel.setText("0");
            this.CantidadDeHotelesjLabel.setText("0");
            this.CostoAumentadoCasajLabel.setText("0");
            this.CostoAumentadoHoteljLabel.setText("0");
            this.GrupoPropiedadjLabel.setText("N/A");
            this.PrecioCasajLabel.setText("0");
            this.PrecioHoteljLabel.setText("0");
            this.CostoEstanciajLabel.setText("0");
            //
            this.CostoServiciojLabel.setText("0");
            //
            this.CostoUsoEstacionjLabel.setText(String.valueOf(costoEstacion));
            
        }
        if(casillaVerificar instanceof CasillaPropiedadServicioBasico)
        {
            float costoServico = ((CasillaPropiedadServicioBasico) casillaVerificar).getCostoServicio();
            //
            this.CantidadDeCasasjLabel.setText("0");
            this.CantidadDeHotelesjLabel.setText("0");
            this.CostoAumentadoCasajLabel.setText("0");
            this.CostoAumentadoHoteljLabel.setText("0");
            this.GrupoPropiedadjLabel.setText("N/A");
            this.PrecioCasajLabel.setText("0");
            this.PrecioHoteljLabel.setText("0");
            this.CostoEstanciajLabel.setText("0");
            //
            this.CostoServiciojLabel.setText(String.valueOf(costoServico));
            //
            this.CostoUsoEstacionjLabel.setText("0");
            
        }
        if(casillaVerificar instanceof CasillaPropiedad)
        {
            boolean estadoHipoteca = ((CasillaPropiedad) casillaVerificar).getEstadoHipoteca();
            if(estadoHipoteca)
            {
                this.EstadoHipotecajLabel.setText("Hipotecada");
            }
            else
            {
                this.EstadoHipotecajLabel.setText("No Hipotecada");
            }
            CostoHipotecajLabel.setText(String.valueOf(((CasillaPropiedad) casillaVerificar).getPrecioHipoteca()));
        }
    }//GEN-LAST:event_PropiedadesjComboBoxActionPerformed

    private void realizarTransaccionjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realizarTransaccionjButtonActionPerformed
        //EXTRAE EL NOMBRE DE LA PROPIEDAD Y EL JUGADOR SELECCIONADO
        String nombreCasillaSeleccionada = (String)PropiedadesjComboBox2.getSelectedItem();
        String nombreJugadorAcreedor = (String)compañeroDeJuegojComboBox.getSelectedItem();
        
        Jugador jugadorAcreedor = jugadoresDeLaPartida.retornarJugador(nombreJugadorAcreedor);
        Casillas casillaVerificar = this.casillasDeLaPartida.retornarCasilla(nombreCasillaSeleccionada);
        //SE CONFIRMA SI EL JUGADOR ES EL PROPIEATRIO DE LA PROPIEDAD
        if(((CasillaPropiedad)casillaVerificar).getJugadorDuenio().equals(jugadorDelTurno.getNombreJugador()))
        {   //SE BUSCA LA PROPIEDAD EN LA LISTA Y SE CAMBIA EL NOMBRE DEL DUENIO DEL JUGADOR
            int seleccion = JOptionPane.showConfirmDialog(this, nombreJugadorAcreedor+" acepta comprar la propiedad de "+jugadorDelTurno.getNombreJugador());
            if(seleccion == JOptionPane.YES_OPTION)
            {
                ((CasillaPropiedad)casillaVerificar).setJugadorDuenio(nombreJugadorAcreedor);
                JOptionPane.showMessageDialog(this, nombreJugadorAcreedor+" es dueño de "+casillaVerificar.getNombreCasilla());
                jugadorDelTurno.recibirDinero(((CasillaPropiedad)casillaVerificar).getPrecioCompra());
                jugadorAcreedor.pagarMulta(((CasillaPropiedad)casillaVerificar).getPrecioCompra());
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Usted ya no es dueño de la propidad");
        }
        
    }//GEN-LAST:event_realizarTransaccionjButtonActionPerformed

    private void PagarHipotecajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PagarHipotecajButtonActionPerformed
        //SE EXTRE EL NOMBRE DE LA PROPIEDAD Y SE BUSCA EN LA LISTA
        String nombreCasillaSeleccionada = (String)PropiedadesjComboBox.getSelectedItem();
        Casillas casillaVerificar = this.casillasDeLaPartida.retornarCasilla(nombreCasillaSeleccionada);
        //SE VERIFICA SI LA CASILLAS SELECCIONADA ES UNA PROPIEDAD
        if(casillaVerificar instanceof CasillaPropiedad)
        {
            //VERIFICA SI LA PROPIEDAD ESTA HIPOTECADA
            if(((CasillaPropiedad) casillaVerificar).getEstadoHipoteca())
            {
                float precioHipoteca = ((CasillaPropiedad) casillaVerificar).getPrecioHipoteca();
                //VERIFICA SI EL JUGADOR PUEDE PAGAR LA HIPOTECA
                if(jugadorDelTurno.getFondos()>precioHipoteca)
                {
                    jugadorDelTurno.pagarMulta(precioHipoteca+(precioHipoteca*(this.porcentajeHipoteca/100)));
                    ((CasillaPropiedad) casillaVerificar).setEstadoHipoteca(false);
                    JOptionPane.showMessageDialog(this, "Ah pagado exitosamente la hipoteca de su propiedad");
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "No tiene el dinero suficiente para pagar la hipoteca");
                }
                
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Su propiedad no esta hipotecada");
            }
            
        }
    }//GEN-LAST:event_PagarHipotecajButtonActionPerformed

    private void HipotecarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HipotecarjButtonActionPerformed
        //SE EXTRE EL NOMBRE DE LA PROPIEDAD Y SE BUSCA EN LA LISTA
        String nombreCasillaSeleccionada = (String)PropiedadesjComboBox.getSelectedItem();
        Casillas casillaVerificar = this.casillasDeLaPartida.retornarCasilla(nombreCasillaSeleccionada);
        //VERIFICA SI LA CASILLA ES UNA PROPIEDAD
        if(casillaVerificar instanceof CasillaPropiedad)
        {
            //VERIFICA SI EL JUGADOR ES DUELO DE LA PROPIEDAD A HIPOTECAR
            if(((CasillaPropiedad) casillaVerificar).getJugadorDuenio().equals(jugadorDelTurno.getNombreJugador()))
            {
                //SE VERIFICA SI LA PROPIEDAD ES UNS ISTANCIA DE PORPIEDAD LUGAR
                if(casillaVerificar instanceof CasillaPropiedadLugar)
                {
                    //SE VERIFICA A QUE TIPO DE GRUPO PERTENECE LA PROPIEDAD
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Rojo"))
                    {   
                        //SE VERIFICA SI LA PROPIEDAD TIENE CASAS U HOTELES
                        if(casasRojo==0&&hotelesRojo==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            //SE PREGUNTA AL USUARIO DE LA DECION 
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                //SE PAGA LA HIPOTECA DE LA PROPIEDAD
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                            
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Amarillo"))
                    {
                        if(casasAmarillo==0&&hotelesAmarillo==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Cafe"))
                    {
                        if(casasCafe==0&&hotelesCafe==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Naranja"))
                    {
                        if(casasNaranja==0&&hotelesNaranja==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Verde Claro"))
                    {
                        if(casasVerdeclaro==0&&hotelesVerdeclaro==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Azul"))
                    {
                       if(casasAzul==0&&hotelesAzul==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Rosa"))
                    {
                        if(casasRosa==0&&hotelesRosa==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                    if(((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad().equals("Verde"))
                    {
                        if(casasVerde==0&&hotelesVerde==0)
                        {
                            int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                            if(opcion==JOptionPane.YES_OPTION)
                            {
                                ((CasillaPropiedadLugar) casillaVerificar).setEstadoHipoteca(true);
                                jugadorDelTurno.recibirDinero(((CasillaPropiedadLugar) casillaVerificar).getPrecioHipoteca());
                                JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                            }
                            else
                            {
                               JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "El grupo de propiedades no debe tener edificaciones para hipotecar");
                        }
                    }
                }
                if(casillaVerificar instanceof CasillaPropiedadEstacion)
                {
                    //AQUI SOLO SE VERIFICA SI LA PROPIEDAD ES DEL TIPO DE INSANCIA Y SE VERIFICA SI SE CONFIRMA LA ACCION 
                    int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                    if(opcion==JOptionPane.YES_OPTION)
                    {
                        ((CasillaPropiedadEstacion) casillaVerificar).setEstadoHipoteca(true);
                        jugadorDelTurno.recibirDinero(((CasillaPropiedadEstacion) casillaVerificar).getPrecioHipoteca());
                        JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                    }
                }
                if(casillaVerificar instanceof CasillaPropiedadServicioBasico)
                {
                    //AQUI SOLO SE VERIFICA SI LA PROPIEDAD ES DEL TIPO DE INSANCIA Y SE VERIFICA SI SE CONFIRMA LA ACCION 
                    int opcion = JOptionPane.showConfirmDialog(this, "Seguro de hipotecar la propiedad");
                    if(opcion==JOptionPane.YES_OPTION)
                    {
                        ((CasillaPropiedadServicioBasico) casillaVerificar).setEstadoHipoteca(true);
                        jugadorDelTurno.recibirDinero(((CasillaPropiedadServicioBasico) casillaVerificar).getPrecioHipoteca());
                        JOptionPane.showMessageDialog(this, "La propiedad esta hipotecada recibe el dinero\npodra recibir produccion de su tarjeta hasta que pague la hipoteca");
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "No se hipoteco la propiedad");
                    }
                }
            }
        }
    }//GEN-LAST:event_HipotecarjButtonActionPerformed
    //CANTIDAD SEGUN LA TARJETA QUE TIENE EL JUGADOR
        private int casasRojo=0;
        private int hotelesRojo=0;
        private int casasAmarillo=0;
        private int hotelesAmarillo=0;
        private int casasCafe=0;
        private int hotelesCafe=0;
        private int casasNaranja=0;
        private int hotelesNaranja=0;
        private int casasVerdeclaro=0;
        private int hotelesVerdeclaro=0;
        private int casasAzul=0;
        private int hotelesAzul=0;
        private int casasRosa=0;
        private int hotelesRosa=0;
        private int casasVerde=0;
        private int hotelesVerde=0;
    //
    private void verificarPropiedades(){
        Casillas temporal = this.casillasDeLaPartida.getRaiz();
        //REALIIZA UN CICLO DONDE SEGUN EL TIPO DE PROPIEDAD CUENTA LAS CASAS QUE POSEE PA REALIZAR LAS COMPARACIONES DEL PROGRAMA
        for (int i = 0; i < 40; i++) {
            if(temporal instanceof CasillaPropiedadLugar)
            {
                if(((CasillaPropiedadLugar) temporal).getJugadorDuenio().equals(jugadorDelTurno.getNombreJugador()))
                {
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Rojo"))
                    {
                        this.casasRojo=this.casasRojo+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesRojo=this.hotelesRojo+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Amarillo"))
                    {
                        this.casasAmarillo=this.casasAmarillo+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesAmarillo=this.hotelesAmarillo+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Cafe"))
                    {
                        this.casasCafe=this.casasCafe+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesCafe=this.hotelesCafe+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Naranja"))
                    {
                        this.casasNaranja=this.casasNaranja+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesNaranja=this.hotelesNaranja+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Verde Claro"))
                    {
                        this.casasVerdeclaro=this.casasVerdeclaro+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesVerdeclaro=this.hotelesVerdeclaro+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Azul"))
                    {
                        this.casasAzul=this.casasAzul+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesAzul=this.hotelesAzul+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Rosa"))
                    {
                        this.casasRosa=this.casasRosa+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesRosa=this.hotelesRosa+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Verde"))
                    {
                        this.casasVerde=this.casasVerde+((CasillaPropiedadLugar) temporal).getCantidadCasas();
                        this.hotelesVerde=this.hotelesVerde+((CasillaPropiedadLugar) temporal).getCantidadHoteles();
                    }
                }
            }
            temporal=temporal.getCasillaSiguiente();
        }
        
    }
    /**
     * AGREGA LOS JUGADORES AL COMBOBOX DE JUGADORES
     */
    private void agregarJugadores(){
        int cantidaJugadores = this.jugadoresDeLaPartida.jugadoresIngresados();
        Jugador temporal = jugadoresDeLaPartida.getRaiz();
        for (int i = 0; i < cantidaJugadores; i++) {    
            if(!(temporal==jugadorDelTurno))
            {
                compañeroDeJuegojComboBox.addItem(temporal.getNombreJugador());
            }
            temporal = temporal.getJugadorSiguiente();
        }
    }
    /**
     * AGRAGA LAS PROPIEDADES AL COMBOBOX DE PROPIEDADES
     */
    private void agregarPropiedades(){
        Casillas temporal = casillasDeLaPartida.getRaiz();
        
        for (int i = 0; i < 40; i++) {
            if(temporal instanceof CasillaPropiedad)
            {
                if(((CasillaPropiedad) temporal).getJugadorDuenio().equals(jugadorDelTurno.getNombreJugador()))
                {
                    PropiedadesjComboBox.addItem(temporal.getNombreCasilla());
                    PropiedadesjComboBox2.addItem(temporal.getNombreCasilla());
                }
            }
            temporal=temporal.getCasillaSiguiente();
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CantidadDeCasasjLabel;
    private javax.swing.JLabel CantidadDeHotelesjLabel;
    private javax.swing.JButton CerrarjButton;
    private javax.swing.JLabel CostoAumentadoCasajLabel;
    private javax.swing.JLabel CostoAumentadoHoteljLabel;
    private javax.swing.JLabel CostoEstanciajLabel;
    private javax.swing.JLabel CostoHipotecajLabel;
    private javax.swing.JLabel CostoServiciojLabel;
    private javax.swing.JLabel CostoUsoEstacionjLabel;
    private javax.swing.JLabel EstadoHipotecajLabel;
    private javax.swing.JLabel GrupoPropiedadjLabel;
    private javax.swing.JButton HipotecarjButton;
    private javax.swing.JButton PagarHipotecajButton;
    private javax.swing.JLabel PrecioCasajLabel;
    private javax.swing.JLabel PrecioHoteljLabel;
    private javax.swing.JComboBox<String> PropiedadesjComboBox;
    private javax.swing.JComboBox<String> PropiedadesjComboBox2;
    private javax.swing.JComboBox<String> compañeroDeJuegojComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton realizarTransaccionjButton;
    // End of variables declaration//GEN-END:variables
}
