/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto2.gui;

import com.carlos.proyecto2.EscrituraLecturaArchivos.AccesoDirectorios;
import java.io.*;

import javax.swing.JFileChooser;

import com.carlos.proyecto2.EscrituraLecturaArchivos.EscrituraObjeto;
import com.carlos.proyecto2.EscrituraLecturaArchivos.FiltroBoard;
import com.carlos.proyecto2.EscrituraLecturaArchivos.FiltroGame;
import com.carlos.proyecto2.EscrituraLecturaArchivos.LecturaObjeto;
import com.carlos.proyecto2.Excepciones.ExtencionNotFoundException;
import com.carlos.proyecto2.Partida.Partida;
import com.carlos.proyecto2.Tablero.Tablero;
import com.carlos.proyecto2.gui.NuevoJuegoJInternalFrame;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author benjamin
 */
public class MainFrame extends javax.swing.JFrame {

    private String directorioDeGuardado;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(String titulo, String directorioDeGuardado) {
        super(titulo);
        this.directorioDeGuardado = directorioDeGuardado;
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        EscritorioJDesktopPane = new javax.swing.JDesktopPane();
        BarraPrincipaljMenuBar = new javax.swing.JMenuBar();
        JuegojMenu = new javax.swing.JMenu();
        NuevoJuegojMenuItem = new javax.swing.JMenuItem();
        CargarJuegoMenuItem = new javax.swing.JMenuItem();
        EditarJuegojMenu = new javax.swing.JMenu();
        EditarTablerojMenuItem = new javax.swing.JMenuItem();
        EditarConfiguracionesjMenuItem = new javax.swing.JMenuItem();
        EditarTarjetasjMenuItem = new javax.swing.JMenuItem();
        RankingjMenu = new javax.swing.JMenu();
        JugadoresjMenuItem = new javax.swing.JMenuItem();
        AcercaDejMenu = new javax.swing.JMenu();
        InformacionjMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BarraPrincipaljMenuBar.setMinimumSize(new java.awt.Dimension(400, 200));

        JuegojMenu.setText("Juego");

        NuevoJuegojMenuItem.setText("Nueva Partida");
        NuevoJuegojMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoJuegojMenuItemActionPerformed(evt);
            }
        });
        JuegojMenu.add(NuevoJuegojMenuItem);

        CargarJuegoMenuItem.setText("Cargar Partida");
        CargarJuegoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarJuegoMenuItemActionPerformed(evt);
            }
        });
        JuegojMenu.add(CargarJuegoMenuItem);

        EditarJuegojMenu.setText("Editar Partida");

        EditarTablerojMenuItem.setText("Editar Tablero");
        EditarTablerojMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarTablerojMenuItemActionPerformed(evt);
            }
        });
        EditarJuegojMenu.add(EditarTablerojMenuItem);

        EditarConfiguracionesjMenuItem.setText("Editar Configuraciones del Juego");
        EditarConfiguracionesjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarConfiguracionesjMenuItemActionPerformed(evt);
            }
        });
        EditarJuegojMenu.add(EditarConfiguracionesjMenuItem);

        EditarTarjetasjMenuItem.setText("Editar Tarjetas del Juego");
        EditarTarjetasjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarTarjetasjMenuItemActionPerformed(evt);
            }
        });
        EditarJuegojMenu.add(EditarTarjetasjMenuItem);

        JuegojMenu.add(EditarJuegojMenu);

        BarraPrincipaljMenuBar.add(JuegojMenu);

        RankingjMenu.setText("Ranking");

        JugadoresjMenuItem.setText("Jugadores");
        JugadoresjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JugadoresjMenuItemActionPerformed(evt);
            }
        });
        RankingjMenu.add(JugadoresjMenuItem);

        BarraPrincipaljMenuBar.add(RankingjMenu);

        AcercaDejMenu.setText("Acerca de");

        InformacionjMenuItem.setText("Informacion");
        InformacionjMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformacionjMenuItemActionPerformed(evt);
            }
        });
        AcercaDejMenu.add(InformacionjMenuItem);

        BarraPrincipaljMenuBar.add(AcercaDejMenu);

        setJMenuBar(BarraPrincipaljMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EscritorioJDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(EscritorioJDesktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JugadoresjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JugadoresjMenuItemActionPerformed
        //SE GENERA EL FORMULARIO PARA VISUALIZAR EL RANKING DEL JEUGO
        try {
            RanlingJDialog RankingJugadores = new RanlingJDialog(this, true,this.directorioDeGuardado);
            RankingJugadores.setVisible(true);
        } catch (ExtencionNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_JugadoresjMenuItemActionPerformed

    private void EditarTablerojMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarTablerojMenuItemActionPerformed
        //SE INCIIALIZAN LAS VARIABLES PARA ABRIR UN ARCHIVO Y CARGARLO A LOS METODOS DE LECTURA DE ARCHIVOS
        File archivoCargado;
        JFileChooser archivoSeleccionado;
        archivoSeleccionado = new JFileChooser();
        archivoSeleccionado.setCurrentDirectory(new File(this.directorioDeGuardado));
        archivoSeleccionado.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSeleccionado.setFileFilter(new FiltroBoard());
        
        int respuesta = archivoSeleccionado.showOpenDialog(this);
        //SI EL ARCHIVO ES APROVADO ENTONCES SE HACE LA CONVERCION DEL MISMO
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            archivoCargado = archivoSeleccionado.getSelectedFile();
            LecturaObjeto lecturaObjeto = new LecturaObjeto();
            Partida partidaCargada;
            Tablero tableroCargado;
            try {
                tableroCargado = (Tablero) lecturaObjeto.readSerialization(archivoCargado);
                partidaCargada = (Partida) lecturaObjeto.readSerialization(this.directorioDeGuardado,tableroCargado.getNombreDelJuego(), tableroCargado.getNombreDelJuego(), ".game");
                //partidaCargada.getTableroDeJuego().getCasillasDelTablero().listarElementos();
                generarEditorDeTablero(tableroCargado,partidaCargada);
            } catch (ClassNotFoundException | ExtencionNotFoundException | IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EditarTablerojMenuItemActionPerformed

    private void EditarConfiguracionesjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarConfiguracionesjMenuItemActionPerformed
        //SE INCIIALIZAN LAS VARIABLES PARA ABRIR UN ARCHIVO Y CARGARLO A LOS METODOS DE LECTURA DE ARCHIVOS
        File archivoCargado;
        JFileChooser archivoSeleccionado;
        archivoSeleccionado = new JFileChooser();
        archivoSeleccionado.setCurrentDirectory(new File(this.directorioDeGuardado));
        archivoSeleccionado.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSeleccionado.setFileFilter(new FiltroBoard());
        
        int respuesta = archivoSeleccionado.showOpenDialog(this);
        //SI EL ARCHIVO ES APROVADO ENTONCES SE HACE LA CONVERCION DEL MISMO
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            archivoCargado = archivoSeleccionado.getSelectedFile();
            LecturaObjeto lecturaObjeto = new LecturaObjeto();
            Partida partidaCargada;
            Tablero tableroCargado;
            try {
                tableroCargado = (Tablero) lecturaObjeto.readSerialization(archivoCargado);
                partidaCargada = (Partida) lecturaObjeto.readSerialization(this.directorioDeGuardado,tableroCargado.getNombreDelJuego(), tableroCargado.getNombreDelJuego(), ".game");
                generarEditorConfiguracionJuego(tableroCargado,partidaCargada);
            } catch (ClassNotFoundException | ExtencionNotFoundException | IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_EditarConfiguracionesjMenuItemActionPerformed

    private void EditarTarjetasjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarTarjetasjMenuItemActionPerformed
        
        //SE INCIIALIZAN LAS VARIABLES PARA ABRIR UN ARCHIVO Y CARGARLO A LOS METODOS DE LECTURA DE ARCHIVOS

        habilitarPestanaJuego(false);
        File archivoCargado;
        JFileChooser archivoSeleccionado;
        archivoSeleccionado = new JFileChooser();
        archivoSeleccionado.setCurrentDirectory(new File(this.directorioDeGuardado));
        archivoSeleccionado.setFileSelectionMode(JFileChooser.FILES_ONLY);
        archivoSeleccionado.setFileFilter(new FiltroBoard());

        int respuesta = archivoSeleccionado.showOpenDialog(this);
        //SI EL ARCHIVO ES APROVADO ENTONCES SE HACE LA CONVERCION DEL MISMO
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            archivoCargado = archivoSeleccionado.getSelectedFile();
            LecturaObjeto lecturaObjeto = new LecturaObjeto();
            Partida partidaCargada;
            Tablero tableroCargado;
            try {
                tableroCargado = (Tablero) lecturaObjeto.readSerialization(archivoCargado);
                partidaCargada = (Partida) lecturaObjeto.readSerialization(this.directorioDeGuardado,tableroCargado.getNombreDelJuego(), tableroCargado.getNombreDelJuego(), ".game");
                generarEditorTarjetasJuego(tableroCargado,partidaCargada);
            } catch (ClassNotFoundException | ExtencionNotFoundException | IOException e) {
                e.printStackTrace();
            }
        } else{
            habilitarPestanaJuego(true);
        }      
    }//GEN-LAST:event_EditarTarjetasjMenuItemActionPerformed

    private void NuevoJuegojMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_NuevoJuegojMenuItemActionPerformed
        //INCIALIZA Y MUESTRA EL FORMULARIO DE NUEVO JEUGO
        NuevoJuegoJInternalFrame nuevaVentanaCrear = new NuevoJuegoJInternalFrame(this.directorioDeGuardado, this);
        this.EscritorioJDesktopPane.add(nuevaVentanaCrear);
        nuevaVentanaCrear.show();
        habilitarPestanaJuego(false);
    }// GEN-LAST:event_NuevoJuegojMenuItemActionPerformed

    private void InformacionjMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_InformacionjMenuItemActionPerformed
        //MUESTRAS EL APARDADO ACERDE DEL SOFTWARE
        AcercaDeJDialog acercaDe = new AcercaDeJDialog(this, "Acerca De", true);
        acercaDe.setVisible(true);
    }// GEN-LAST:event_InformacionjMenuItemActionPerformed
    
    public void VerificacionRanking()
    {
        AccesoDirectorios crearRanking = new AccesoDirectorios();
        crearRanking.CrearCarpetaRankingYArchivo();
    }
    private void CargarJuegoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_CargarJuegoMenuItemActionPerformed
        //SE REALIZAN LAS ACCIONES DE CARGAR UNA PARTIDA
        cargarJuego();
    } 
    /**
     * PROCEDIMIENTOS PARA CARGAR UNA PARTIDA
     */
    public void  cargarJuego(){
        //SE INCIIALIZAN LAS VARIABLES PARA ABRIR UN ARCHIVO Y CARGARLO A LOS METODOS DE LECTURA DE ARCHIVOS
        VerificacionRanking();
        File archivoCargado;
        JFileChooser selArchivo;
        selArchivo = new JFileChooser();
        selArchivo.setCurrentDirectory(new File(this.directorioDeGuardado));
        selArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
        selArchivo.setFileFilter(new FiltroGame());

        int respuesta = selArchivo.showOpenDialog(this);
        //SI EL ARCHIVO ES APROVADO ENTONCES SE HACE LA CONVERCION DEL MISMO
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            //
            archivoCargado = selArchivo.getSelectedFile();
            LecturaObjeto lecturaObjeto = new LecturaObjeto();
            Partida pruebaPartida;
            try {
                pruebaPartida = (Partida) lecturaObjeto.readSerialization(archivoCargado);
                generarEspacioDeJuego(pruebaPartida);
            } catch (ClassNotFoundException | ExtencionNotFoundException | IOException e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * CONFIGURACIONES DE LA PARTIDA DEL JEUGO 
     * @param partida PARTIDA
     */
    public void configuracionDeJugadoresDelJuego(Partida partida){
        //INCIALIZA LA VENTA DE CONFIGURACION DE LOS JUGADORES DEL JUEGO ALMACENADO EN EL FRAME PRINCIPAL
        IngresoJugadoresJInternalFrame ingresoJugadores = new IngresoJugadoresJInternalFrame(this.directorioDeGuardado, partida,this);
        this.EscritorioJDesktopPane.add(ingresoJugadores);
        ingresoJugadores.show();
    }
    /**
     * EDITOR DE TARJETAS DEL JEUGO
     * @param tableroCargado TABLERO 
     * @param partidaCargada PARTIDA
     */
    private void generarEditorTarjetasJuego(Tablero tableroCargado,Partida partidaCargada){
        //GENERA EL FORMULARIO DE CREAR TARJETAS
        ConfiguracionTarjetasTableroJInternalFrame nuevoTablero = new ConfiguracionTarjetasTableroJInternalFrame(this.directorioDeGuardado,partidaCargada,tableroCargado,this);
        this.EscritorioJDesktopPane.add(nuevoTablero);
        nuevoTablero.show();
    }
    /**
     * CONFIGURACIONES GENERALES DEL JEUGO
     * @param tableroCargado    TABLERO
     * @param partidaCargada    PARTIDA
     */
    private void generarEditorConfiguracionJuego(Tablero tableroCargado,Partida partidaCargada){
        //GENERA EL FOMULARIO DE EDICION DE TARJETAS DEL JEUGO
        NuevoJuegoJInternalFrame editarConfiguracionJuego =new NuevoJuegoJInternalFrame(this.directorioDeGuardado, this, partidaCargada, tableroCargado);
        this.EscritorioJDesktopPane.add(editarConfiguracionJuego);
        editarConfiguracionJuego.show();
        habilitarPestanaJuego(false);
    }
    /**
     * EDITOR DEL TABELRO 
     * @param tableroCargado TABLERO DE JEUGO 
     * @param partidaCargada PARTIDA CARGADA
     */
    private void generarEditorDeTablero(Tablero tableroCargado,Partida partidaCargada){
        //GENERA EL FORMULARIO PARA LA EDIDICON DEL TABLERO
        EditarMapaJFrame editorDeMapa = new EditarMapaJFrame(this,tableroCargado,partidaCargada,this.directorioDeGuardado);
        editorDeMapa.setVisible(true);
        this.setVisible(false);
    }
    /**
     * ESPACIO DONDE SE DESARROLLA EL JUEGO
     * @param partidaCargada
     */
    private void generarEspacioDeJuego(Partida partidaCargada){
        //GENERA EN ESPACIO DONDE SE JUEGA LA PARTIDA DEL JUEGO
        EspacioJInternalFrame generarEspacioJInternalFrame = new EspacioJInternalFrame(this,partidaCargada,this.directorioDeGuardado);
        this.EscritorioJDesktopPane.add(generarEspacioJInternalFrame);
        generarEspacioJInternalFrame.show();
        habilitarPestanaJuego(false);
    }
    public void visualizarPrincipal(){
        this.setVisible(true);
    }
    /**
     * HABILITA O DESHABILITA LAS OPCIONES DE JUEGO DEL PROGRAMA
     * @param estado boolean 
     */
    public void habilitarPestanaJuego(boolean estado){
        NuevoJuegojMenuItem.setEnabled(estado);
        CargarJuegoMenuItem.setEnabled(estado);
        EditarJuegojMenu.setEnabled(estado);
    }
    /**
     * CONFIGURACION DE LA TARJETAS DEL TABLERO 
     * @param partida partida
     */
    public void configuracionDeTarjetasDelTablero(Partida partida){
        
        ConfiguracionTarjetasTableroJInternalFrame nuevoTablero = new ConfiguracionTarjetasTableroJInternalFrame(this.directorioDeGuardado,partida,this)   ;
        this.EscritorioJDesktopPane.add(nuevoTablero);
        nuevoTablero.show();
       
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AcercaDejMenu;
    private javax.swing.JMenuBar BarraPrincipaljMenuBar;
    private javax.swing.JMenuItem CargarJuegoMenuItem;
    private javax.swing.JMenuItem EditarConfiguracionesjMenuItem;
    private javax.swing.JMenu EditarJuegojMenu;
    private javax.swing.JMenuItem EditarTablerojMenuItem;
    private javax.swing.JMenuItem EditarTarjetasjMenuItem;
    private javax.swing.JDesktopPane EscritorioJDesktopPane;
    private javax.swing.JMenuItem InformacionjMenuItem;
    private javax.swing.JMenu JuegojMenu;
    private javax.swing.JMenuItem JugadoresjMenuItem;
    private javax.swing.JMenuItem NuevoJuegojMenuItem;
    private javax.swing.JMenu RankingjMenu;
    // End of variables declaration//GEN-END:variables

}
