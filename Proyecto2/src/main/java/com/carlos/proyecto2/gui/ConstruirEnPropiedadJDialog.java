/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto2.gui;

import com.carlos.proyecto2.Casillas.*;
import com.carlos.proyecto2.Jugador.Jugador;
import javax.swing.JOptionPane;

/**
 *
 * @author benjamin
 */
public class ConstruirEnPropiedadJDialog extends javax.swing.JDialog {
    //CONSTANTES DEL JUEGO
        private final int ROJO = 2;
        private final int AMARILLO = 3;
        private final int CAFE = 3;
        private final int NARANJA = 3;
        private final int VERDECLARO = 3;
        private final int AZUL = 3;
        private final int ROSA = 3;
        private final int VERDE = 2;
    //
    //CANTIDAD SEGUN LA TARJETA QUE TIENE EL JUGADOR
        private int rojo=0;
        private int amarillo=0;
        private int cafe=0;
        private int naranaja=0;
        private int verdeclaro=0;
        private int azul=0;
        private int rosa=0;
        private int verde=0;
    //
    private ListaCasilla casillasDeLaPartida;
    private Jugador jugadorDelTurno;
    private int limiteCasasPartida;
    private int limiteHotelesPartida;
    /**
     * Creates new form ConstruirEnPropiedadJDialog
     */
    public ConstruirEnPropiedadJDialog(java.awt.Frame parent, boolean modal,ListaCasilla casillasDeLaPartida, Jugador jugadorDelTurno,int limiteCasasPartida,int limiteHotelesPartida) {
        super(parent, modal);
        this.limiteCasasPartida=limiteCasasPartida;
        this.limiteHotelesPartida=limiteHotelesPartida;
        this.casillasDeLaPartida=casillasDeLaPartida;
        this.jugadorDelTurno=jugadorDelTurno;
        initComponents();
        agregarPropiedades();
        LimiteCasasjLabel.setText(String.valueOf(this.limiteCasasPartida));
        LimiteHotelesjLabel.setText(String.valueOf(this.limiteHotelesPartida));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PropiedadesjComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        ComprarCasajButton = new javax.swing.JButton();
        ComprarHoteljButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        LimiteCasasjLabel = new javax.swing.JLabel();
        LimiteHotelesjLabel = new javax.swing.JLabel();
        CerrarjButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CasasDeLaPropiedadjLabel = new javax.swing.JLabel();
        HotelesDeLaPropiedadjLabel = new javax.swing.JLabel();
        PrecioCasajLabel = new javax.swing.JLabel();
        PrecioHoteljLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        VenderCasajButton = new javax.swing.JButton();
        VenderHoteljButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        PropiedadesjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PropiedadesjComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mis Propiedades ");

        ComprarCasajButton.setText("Comprar Casa");
        ComprarCasajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprarCasajButtonActionPerformed(evt);
            }
        });

        ComprarHoteljButton.setText("Comprar Hotel");
        ComprarHoteljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprarHoteljButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Limite de Casas Permitido");

        jLabel3.setText("Limite de Hoteles Permitido");

        LimiteCasasjLabel.setText("0");

        LimiteHotelesjLabel.setText("0");

        CerrarjButton.setText("Cerrar");
        CerrarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarjButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Casas de la propiedad:");

        jLabel5.setText("Hoteles de la propiedad:");

        CasasDeLaPropiedadjLabel.setText("0");

        HotelesDeLaPropiedadjLabel.setText("0");

        PrecioCasajLabel.setText("0");

        PrecioHoteljLabel.setText("0");

        jLabel8.setText("Precio de Casa:");

        jLabel9.setText("Precio de Hotel:");

        VenderCasajButton.setText("Vender Casa");
        VenderCasajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenderCasajButtonActionPerformed(evt);
            }
        });

        VenderHoteljButton.setText("Vender Hotel");
        VenderHoteljButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenderHoteljButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(34, 34, 34)
                                .addComponent(PrecioHoteljLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(34, 34, 34)
                                .addComponent(PrecioCasajLabel)))
                        .addGap(418, 418, 418)
                        .addComponent(CerrarjButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(CasasDeLaPropiedadjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(VenderCasajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(HotelesDeLaPropiedadjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(VenderHoteljButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(9, 9, 9)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addComponent(PropiedadesjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(LimiteCasasjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LimiteHotelesjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(60, 60, 60)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(ComprarHoteljButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ComprarCasajButton, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LimiteCasasjLabel))
                    .addComponent(ComprarCasajButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PropiedadesjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ComprarHoteljButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(LimiteHotelesjLabel))))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(CasasDeLaPropiedadjLabel)
                            .addComponent(VenderCasajButton))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(HotelesDeLaPropiedadjLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(PrecioCasajLabel))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(PrecioHoteljLabel))
                        .addContainerGap(34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(VenderHoteljButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CerrarjButton)
                        .addGap(21, 21, 21))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PropiedadesjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PropiedadesjComboBoxActionPerformed
        // TODO add your handling code here:
        actualizacionDeLabels();
    }//GEN-LAST:event_PropiedadesjComboBoxActionPerformed
    /**
     * ACTUALIZA LA INFORMACION EN LA PANTALLA
     */
    private void actualizacionDeLabels(){
        String nombreCasillaSeleccionada = (String)PropiedadesjComboBox.getSelectedItem();
        Casillas casillaVerificar = this.casillasDeLaPartida.retornarCasilla(nombreCasillaSeleccionada);
        if(casillaVerificar instanceof CasillaPropiedadLugar)
        {
            int numeroDeCasas = ((CasillaPropiedadLugar) casillaVerificar).getCantidadCasas();
            int numeroDeHoteles = ((CasillaPropiedadLugar) casillaVerificar).getCantidadHoteles();
            float precioCasa= ((CasillaPropiedadLugar) casillaVerificar).getPrecioCasa();
            float precioHotel=((CasillaPropiedadLugar) casillaVerificar).getPrecioHotel();
            this.PrecioCasajLabel.setText(String.valueOf(precioCasa));
            this.PrecioHoteljLabel.setText(String.valueOf(precioHotel));
            this.CasasDeLaPropiedadjLabel.setText(String.valueOf(numeroDeCasas));
            this.HotelesDeLaPropiedadjLabel.setText(String.valueOf(numeroDeHoteles));
        }
    }
    private void ComprarCasajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprarCasajButtonActionPerformed
        // TODO add your handling code here:
        String nombreCasilla = (String)PropiedadesjComboBox.getSelectedItem();
        CasillaPropiedadLugar casillaTerreno = (CasillaPropiedadLugar)this.casillasDeLaPartida.retornarCasilla(nombreCasilla);
        float precioCasa=Float.parseFloat(PrecioCasajLabel.getText());
        
        int numeroCasasPropiedad = casillaTerreno.getCantidadCasas();
        int numeroDeHotelesPropiedad = casillaTerreno.getCantidadHoteles();
        //verificamos el color de la tarjeta en este nivel
        //----- en la segunda comparacion verificamos qeu se tienen las tarjetas del mismo color y la cantidad de csas permitidas
        //----- si es cierto se contrulle una casa de lo contrario se manda un mensaje de error al usuario
        if(casillaTerreno.getGrupoPropiedad().equals("Rojo"))
        {
            if(ROJO==rojo&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Amarillo"))
        {
            if(AMARILLO==amarillo&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                System.out.println(numeroCasasPropiedad);
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
                System.out.println(casillaTerreno.getCantidadCasas());
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Cafe"))
        {
            if(CAFE==cafe&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Naranja"))
        {
            if(NARANJA==naranaja&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Verde Claro"))
        {
            if(VERDECLARO==verdeclaro&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Azul"))
        {
            if(AZUL==azul&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Rosa"))
        {
            if(ROSA==rosa&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Verde"))
        {
            if(VERDE==verde&&(numeroCasasPropiedad<limiteCasasPartida))
            {
                casillaTerreno.agregarCasa();
                this.jugadorDelTurno.pagarMulta(precioCasa);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido\no tiene propiedades hipotecadas del mismo grupo");
            }
        }
        actualizacionDeLabels();
    }//GEN-LAST:event_ComprarCasajButtonActionPerformed

    private void ComprarHoteljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComprarHoteljButtonActionPerformed
        // TODO add your handling code here:
         //verificamos el color de la tarjeta en este nivel
        //----- en la segunda comparacion verificamos qeu se tienen las tarjetas del mismo color y la cantidad de hoteles permitidos
        //----- si es cierto se contrulle un hotel de lo contrario se manda un mensaje de error al usuario
        String nombreCasilla = (String)PropiedadesjComboBox.getSelectedItem();
        CasillaPropiedadLugar casillaTerreno = (CasillaPropiedadLugar)this.casillasDeLaPartida.retornarCasilla(nombreCasilla);
        float precioHotel=Float.parseFloat(PrecioHoteljLabel.getText());
        
        int numeroCasasPropiedad = casillaTerreno.getCantidadCasas();
        int numeroHotelesPropiedad = casillaTerreno.getCantidadHoteles();
        
        if(casillaTerreno.getGrupoPropiedad().equals("Rojo"))
        {
            if(ROJO==rojo&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Amarillo"))
        {
            if(AMARILLO==amarillo&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Cafe"))
        {
            if(CAFE==cafe&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Naranja"))
        {
            if(NARANJA==naranaja&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Verde Claro"))
        {
            if(VERDECLARO==verdeclaro&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Azul"))
        {
            if(AZUL==azul&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Rosa"))
        {
            if(ROSA==rosa&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        if(casillaTerreno.getGrupoPropiedad().equals("Verde"))
        {
            if(VERDE==verde&&(numeroCasasPropiedad>=limiteCasasPartida)&&(numeroHotelesPropiedad<limiteHotelesPartida))
            {
                numeroCasasPropiedad=numeroCasasPropiedad-limiteCasasPartida;
                casillaTerreno.setCantidadCasas(numeroCasasPropiedad);
                casillaTerreno.agregarHoteles();
                jugadorDelTurno.pagarMulta(precioHotel);
            }
            else
            {
                JOptionPane.showMessageDialog(this, "No cuenta con todas las propiedades del mismo grupo\no excede el numero de casas permitido");
            }
        }
        actualizacionDeLabels();
    }//GEN-LAST:event_ComprarHoteljButtonActionPerformed

    private void VenderCasajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenderCasajButtonActionPerformed
        //se extraen las casracteristicas de la propiedad
        String nombreCasilla = (String)PropiedadesjComboBox.getSelectedItem();
        CasillaPropiedadLugar casillaTerreno = (CasillaPropiedadLugar)this.casillasDeLaPartida.retornarCasilla(nombreCasilla);
        float precioCasa=Float.parseFloat(PrecioCasajLabel.getText());
        int numeroCasasPropiedad = casillaTerreno.getCantidadCasas();
        //se verifica la cantidad si es correcta el jugador recibe su dinero y se lanza un mensaje al usuario
        if(numeroCasasPropiedad>0)
        {
            casillaTerreno.eliminarCasa();
            this.jugadorDelTurno.recibirDinero(precioCasa);
            JOptionPane.showMessageDialog(this, "Ha vendido la propiedad");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Su propiedad no posee ninguna propiedad de este tipo");
        }
    }//GEN-LAST:event_VenderCasajButtonActionPerformed

    private void VenderHoteljButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenderHoteljButtonActionPerformed
        // se ectraen las caracteristicas de la propiedad
        String nombreCasilla = (String)PropiedadesjComboBox.getSelectedItem();
        CasillaPropiedadLugar casillaTerreno = (CasillaPropiedadLugar)this.casillasDeLaPartida.retornarCasilla(nombreCasilla);
        float precioHotel=Float.parseFloat(PrecioHoteljLabel.getText());
        int numeroHotelesPropiedad = casillaTerreno.getCantidadHoteles();
        //se verifica la cantidad si es correcta el jugador recibe su dinero y se lanza un mensaje al usuario
        if(numeroHotelesPropiedad>0)
        {
            casillaTerreno.eliminarHotel();
            this.jugadorDelTurno.recibirDinero(precioHotel);
            JOptionPane.showMessageDialog(this, "Ha vendido la propiedad");
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Su propiedad no posee ninguna propiedad de este tipo");
        }
    }//GEN-LAST:event_VenderHoteljButtonActionPerformed

    private void CerrarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarjButtonActionPerformed
        this.dispose();
        
    }//GEN-LAST:event_CerrarjButtonActionPerformed
    
    private void agregarPropiedades(){
        Casillas temporal = casillasDeLaPartida.getRaiz();
        // con ciclo abarcamos toda las listass y vasmos calsificando cada casilla segun el tipo de isntancia que es
        // despuesd e verificar la instancia las clasificamos en las tres clases de propiedades que existen
        //verificasmos el color de cada una y si esta esta en hipotecada, asi podrmso saber si podemos contruir sobre la propiedad
        for (int i = 0; i < 40; i++) {
            if(temporal instanceof CasillaPropiedadLugar)
            {
                if(((CasillaPropiedadLugar) temporal).getJugadorDuenio().equals(jugadorDelTurno.getNombreJugador()))
                {
                    PropiedadesjComboBox.addItem(temporal.getNombreCasilla());
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Rojo")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.rojo++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Amarillo")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.amarillo++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Cafe")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.cafe++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Naranja")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.naranaja++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Verde Claro")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.verdeclaro++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Azul")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.azul++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Rosa")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.rosa++;
                    }
                    if(((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals("Verde")&&(!((CasillaPropiedadLugar) temporal).getEstadoHipoteca()))
                    {
                        this.verde++;
                    }
                }
            }
            temporal=temporal.getCasillaSiguiente();
        }
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CasasDeLaPropiedadjLabel;
    private javax.swing.JButton CerrarjButton;
    private javax.swing.JButton ComprarCasajButton;
    private javax.swing.JButton ComprarHoteljButton;
    private javax.swing.JLabel HotelesDeLaPropiedadjLabel;
    private javax.swing.JLabel LimiteCasasjLabel;
    private javax.swing.JLabel LimiteHotelesjLabel;
    private javax.swing.JLabel PrecioCasajLabel;
    private javax.swing.JLabel PrecioHoteljLabel;
    private javax.swing.JComboBox<String> PropiedadesjComboBox;
    private javax.swing.JButton VenderCasajButton;
    private javax.swing.JButton VenderHoteljButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
