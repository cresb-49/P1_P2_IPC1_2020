/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto2.gui;

import com.carlos.proyecto2.Casillas.*;
import com.carlos.proyecto2.Dados.Dados;
import com.carlos.proyecto2.EscrituraLecturaArchivos.EscrituraObjeto;
import com.carlos.proyecto2.EscrituraLecturaArchivos.LecturaObjeto;
import com.carlos.proyecto2.Excepciones.ExtencionNotFoundException;
import com.carlos.proyecto2.Excepciones.ObjectNotSerializableExeption;
import com.carlos.proyecto2.Jugador.*;
import com.carlos.proyecto2.Partida.Partida;
import com.carlos.proyecto2.Tarjetas.*;
import java.awt.Container;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author benjamin
 */
public class EspacioJInternalFrame extends javax.swing.JInternalFrame implements Runnable{
    MainFrame FramePrincipal;
    private Container fondo = getContentPane();
    private Partida partidaCargada;
    private JTextField[][] casillasGraficas;
    private String directorioDeGuardado;
    private int tirosDeDadoEnTurno=0;
    //
    private final int ROJO = 2;
    private final int AMARILLO = 3;
    private final int CAFE = 3;
    private final int NARANJA = 3;
    private final int VERDECLARO = 3;
    private final int AZUL = 3;
    private final int ROSA = 3;
    private final int VERDE = 2;
    //
    private boolean activacionReloj = false;
    /**
     * Creates new form EspacioJInternalFrame
     */
    public EspacioJInternalFrame(MainFrame FramePrincipal,Partida partidaCargada,String directorioDeGuardado) {
        this.FramePrincipal=FramePrincipal;
        this.partidaCargada=partidaCargada;
        this.directorioDeGuardado=directorioDeGuardado;
        initComponents();
        this.setBounds(0, 0, 1245, 689);
        this.casillasGraficas=creacionMatriz();
        pintarTablero();
        deshabilitarUbicacionJugadores();
        this.casillasGraficas=creacionMatriz();
        if(!this.partidaCargada.getJugadoresDeLaPartida().getListaMezclada())
        {
            this.partidaCargada.getJugadoresDeLaPartida().mezclarJugadores();
        }
        this.NombreJuTurnojLabel.setText(this.partidaCargada.getJugadoresDeLaPartida().getRaiz().getNombreJugador());
        this.actualizarDineroJugador(this.partidaCargada.getJugadoresDeLaPartida().getRaiz());
        cargaEstadoJugadores();
        this.actualizarEstadoJugadores();
        this.TerminarTurnojButton.setEnabled(false);
        if(this.partidaCargada.isEstadoDePartida())
        {
            JOptionPane.showMessageDialog(this, "Esta partida ya esta terminada");
            accionesFinalizarPartida();
        }
        else{
            this.activacionReloj=true;
            configuracionDeTiempo();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        casp21 = new javax.swing.JTextField();
        casn23 = new javax.swing.JTextField();
        casn21 = new javax.swing.JTextField();
        casn22 = new javax.swing.JTextField();
        casn25 = new javax.swing.JTextField();
        casp22 = new javax.swing.JTextField();
        casp23 = new javax.swing.JTextField();
        casp24 = new javax.swing.JTextField();
        casn24 = new javax.swing.JTextField();
        casp10 = new javax.swing.JTextField();
        casn31 = new javax.swing.JTextField();
        casp25 = new javax.swing.JTextField();
        casn26 = new javax.swing.JTextField();
        casp26 = new javax.swing.JTextField();
        casn27 = new javax.swing.JTextField();
        casp27 = new javax.swing.JTextField();
        casn28 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        casp28 = new javax.swing.JTextField();
        casn29 = new javax.swing.JTextField();
        casp29 = new javax.swing.JTextField();
        casn30 = new javax.swing.JTextField();
        casp30 = new javax.swing.JTextField();
        casp31 = new javax.swing.JTextField();
        casn32 = new javax.swing.JTextField();
        casp32 = new javax.swing.JTextField();
        casn33 = new javax.swing.JTextField();
        casp33 = new javax.swing.JTextField();
        casn11 = new javax.swing.JTextField();
        casn35 = new javax.swing.JTextField();
        casp35 = new javax.swing.JTextField();
        casn34 = new javax.swing.JTextField();
        casp34 = new javax.swing.JTextField();
        casn36 = new javax.swing.JTextField();
        casp36 = new javax.swing.JTextField();
        casn37 = new javax.swing.JTextField();
        casp37 = new javax.swing.JTextField();
        casn38 = new javax.swing.JTextField();
        casp38 = new javax.swing.JTextField();
        casn39 = new javax.swing.JTextField();
        casp39 = new javax.swing.JTextField();
        casn40 = new javax.swing.JTextField();
        casp40 = new javax.swing.JTextField();
        casp1 = new javax.swing.JTextField();
        casp2 = new javax.swing.JTextField();
        casn1 = new javax.swing.JTextField();
        casn2 = new javax.swing.JTextField();
        casp3 = new javax.swing.JTextField();
        casp5 = new javax.swing.JTextField();
        casp4 = new javax.swing.JTextField();
        casn3 = new javax.swing.JTextField();
        casn5 = new javax.swing.JTextField();
        casn4 = new javax.swing.JTextField();
        casn6 = new javax.swing.JTextField();
        casn7 = new javax.swing.JTextField();
        casn8 = new javax.swing.JTextField();
        casn9 = new javax.swing.JTextField();
        casp6 = new javax.swing.JTextField();
        casp7 = new javax.swing.JTextField();
        casp8 = new javax.swing.JTextField();
        casp9 = new javax.swing.JTextField();
        casn10 = new javax.swing.JTextField();
        casp11 = new javax.swing.JTextField();
        casn12 = new javax.swing.JTextField();
        casp13 = new javax.swing.JTextField();
        casn13 = new javax.swing.JTextField();
        casp14 = new javax.swing.JTextField();
        casn14 = new javax.swing.JTextField();
        casp15 = new javax.swing.JTextField();
        casn15 = new javax.swing.JTextField();
        casp20 = new javax.swing.JTextField();
        casn20 = new javax.swing.JTextField();
        casp12 = new javax.swing.JTextField();
        casp16 = new javax.swing.JTextField();
        casn16 = new javax.swing.JTextField();
        casp17 = new javax.swing.JTextField();
        casn17 = new javax.swing.JTextField();
        casp18 = new javax.swing.JTextField();
        casn18 = new javax.swing.JTextField();
        casp19 = new javax.swing.JTextField();
        casn19 = new javax.swing.JTextField();
        SalirjButton = new javax.swing.JButton();
        TerminarJuegojButton = new javax.swing.JButton();
        LanzarDadosjButton = new javax.swing.JButton();
        VerMisPropiedadesjButton = new javax.swing.JButton();
        ConstruirjButton = new javax.swing.JButton();
        BancaRotajButton = new javax.swing.JButton();
        TerminarTurnojButton = new javax.swing.JButton();
        GuardarjButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        NombreJuTurnojLabel = new javax.swing.JLabel();
        Dado3jTextField = new javax.swing.JTextField();
        Dado1jTextField = new javax.swing.JTextField();
        Dado2jTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        Jugador6jLabel = new javax.swing.JLabel();
        Jugador1jLabel = new javax.swing.JLabel();
        Jugador2jLabel = new javax.swing.JLabel();
        Jugador3jLabel = new javax.swing.JLabel();
        Jugador5jLabel = new javax.swing.JLabel();
        Jugador4jLabel = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        casillaJugador6 = new javax.swing.JTextField();
        casillaJugador1 = new javax.swing.JTextField();
        casillaJugador2 = new javax.swing.JTextField();
        casillaJugador3 = new javax.swing.JTextField();
        casillaJugador4 = new javax.swing.JTextField();
        casillaJugador5 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        DineroJugadorTurnojLabel = new javax.swing.JLabel();
        LeyendaTiempojLabel = new javax.swing.JLabel();
        HorajLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();

        getContentPane().setLayout(null);

        casp21.setEditable(false);
        casp21.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp21);
        casp21.setBounds(20, 50, 100, 40);

        casn23.setEditable(false);
        casn23.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn23.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn23.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn23);
        casn23.setBounds(220, 20, 100, 30);

        casn21.setEditable(false);
        casn21.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn21.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn21);
        casn21.setBounds(20, 20, 100, 30);

        casn22.setEditable(false);
        casn22.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn22.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn22.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn22);
        casn22.setBounds(120, 20, 100, 30);

        casn25.setEditable(false);
        casn25.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn25.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn25.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn25);
        casn25.setBounds(320, 90, 100, 30);

        casp22.setEditable(false);
        casp22.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp22.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp22);
        casp22.setBounds(120, 50, 100, 40);

        casp23.setEditable(false);
        casp23.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp23.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp23);
        casp23.setBounds(220, 50, 100, 40);

        casp24.setEditable(false);
        casp24.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp24.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp24);
        casp24.setBounds(320, 50, 100, 40);

        casn24.setEditable(false);
        casn24.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn24.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn24.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn24);
        casn24.setBounds(320, 20, 100, 30);

        casp10.setEditable(false);
        casp10.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp10);
        casp10.setBounds(120, 610, 100, 40);

        casn31.setEditable(false);
        casn31.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn31.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn31.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn31);
        casn31.setBounds(820, 20, 100, 30);

        casp25.setEditable(false);
        casp25.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp25.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp25);
        casp25.setBounds(320, 120, 100, 40);

        casn26.setEditable(false);
        casn26.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn26.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn26.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn26);
        casn26.setBounds(420, 90, 100, 30);

        casp26.setEditable(false);
        casp26.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp26.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp26);
        casp26.setBounds(420, 120, 100, 40);

        casn27.setEditable(false);
        casn27.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn27.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn27.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn27);
        casn27.setBounds(520, 90, 100, 30);

        casp27.setEditable(false);
        casp27.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp27.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp27);
        casp27.setBounds(520, 120, 100, 40);

        casn28.setEditable(false);
        casn28.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn28.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn28.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn28);
        casn28.setBounds(520, 20, 100, 30);

        jTextField20.setEditable(false);
        jTextField20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField20.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(jTextField20);
        jTextField20.setBounds(520, 20, 100, 30);

        casp28.setEditable(false);
        casp28.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp28.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp28);
        casp28.setBounds(520, 50, 100, 40);

        casn29.setEditable(false);
        casn29.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn29.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn29.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn29);
        casn29.setBounds(620, 20, 100, 30);

        casp29.setEditable(false);
        casp29.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp29.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp29);
        casp29.setBounds(620, 50, 100, 40);

        casn30.setEditable(false);
        casn30.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn30.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn30.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn30);
        casn30.setBounds(720, 20, 100, 30);

        casp30.setEditable(false);
        casp30.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp30.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp30);
        casp30.setBounds(720, 50, 100, 40);

        casp31.setEditable(false);
        casp31.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp31.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp31);
        casp31.setBounds(820, 50, 100, 40);

        casn32.setEditable(false);
        casn32.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn32.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn32.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn32);
        casn32.setBounds(820, 90, 100, 30);

        casp32.setEditable(false);
        casp32.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp32.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp32);
        casp32.setBounds(820, 120, 100, 40);

        casn33.setEditable(false);
        casn33.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn33.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn33.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn33);
        casn33.setBounds(820, 160, 100, 30);

        casp33.setEditable(false);
        casp33.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp33.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp33);
        casp33.setBounds(820, 190, 100, 40);

        casn11.setEditable(false);
        casn11.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn11.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn11);
        casn11.setBounds(20, 580, 100, 30);

        casn35.setEditable(false);
        casn35.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn35.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn35.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn35);
        casn35.setBounds(720, 230, 100, 30);

        casp35.setEditable(false);
        casp35.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp35.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp35);
        casp35.setBounds(720, 260, 100, 40);

        casn34.setEditable(false);
        casn34.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn34.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn34.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn34);
        casn34.setBounds(820, 230, 100, 30);

        casp34.setEditable(false);
        casp34.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp34.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp34);
        casp34.setBounds(820, 260, 100, 40);

        casn36.setEditable(false);
        casn36.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn36.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn36.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn36);
        casn36.setBounds(720, 300, 100, 30);

        casp36.setEditable(false);
        casp36.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp36.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp36);
        casp36.setBounds(720, 330, 100, 40);

        casn37.setEditable(false);
        casn37.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn37.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn37.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn37);
        casn37.setBounds(720, 370, 100, 30);

        casp37.setEditable(false);
        casp37.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp37.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp37);
        casp37.setBounds(720, 400, 100, 40);

        casn38.setEditable(false);
        casn38.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn38.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn38.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn38);
        casn38.setBounds(820, 370, 100, 30);

        casp38.setEditable(false);
        casp38.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp38.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp38);
        casp38.setBounds(820, 400, 100, 40);

        casn39.setEditable(false);
        casn39.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn39.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn39.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn39);
        casn39.setBounds(820, 440, 100, 30);

        casp39.setEditable(false);
        casp39.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp39.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp39);
        casp39.setBounds(820, 470, 100, 40);

        casn40.setEditable(false);
        casn40.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn40.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn40.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn40);
        casn40.setBounds(820, 510, 100, 30);

        casp40.setEditable(false);
        casp40.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp40.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp40);
        casp40.setBounds(820, 540, 100, 40);

        casp1.setEditable(false);
        casp1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp1);
        casp1.setBounds(820, 610, 100, 40);

        casp2.setEditable(false);
        casp2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp2);
        casp2.setBounds(720, 610, 100, 40);

        casn1.setEditable(false);
        casn1.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn1.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn1);
        casn1.setBounds(820, 580, 100, 30);

        casn2.setEditable(false);
        casn2.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn2.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn2);
        casn2.setBounds(720, 580, 100, 30);

        casp3.setEditable(false);
        casp3.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp3);
        casp3.setBounds(620, 610, 100, 40);

        casp5.setEditable(false);
        casp5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp5);
        casp5.setBounds(520, 540, 100, 40);

        casp4.setEditable(false);
        casp4.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp4);
        casp4.setBounds(520, 610, 100, 40);

        casn3.setEditable(false);
        casn3.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn3.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn3);
        casn3.setBounds(620, 580, 100, 30);

        casn5.setEditable(false);
        casn5.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn5.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn5);
        casn5.setBounds(520, 510, 100, 30);

        casn4.setEditable(false);
        casn4.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn4.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn4);
        casn4.setBounds(520, 580, 100, 30);

        casn6.setEditable(false);
        casn6.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn6.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn6);
        casn6.setBounds(420, 510, 100, 30);

        casn7.setEditable(false);
        casn7.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn7.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn7);
        casn7.setBounds(320, 510, 100, 30);

        casn8.setEditable(false);
        casn8.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn8.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn8);
        casn8.setBounds(320, 580, 100, 30);

        casn9.setEditable(false);
        casn9.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn9.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn9);
        casn9.setBounds(220, 580, 100, 30);

        casp6.setEditable(false);
        casp6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp6);
        casp6.setBounds(420, 540, 100, 40);

        casp7.setEditable(false);
        casp7.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp7.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp7);
        casp7.setBounds(320, 540, 100, 40);

        casp8.setEditable(false);
        casp8.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp8.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp8);
        casp8.setBounds(320, 610, 100, 40);

        casp9.setEditable(false);
        casp9.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp9.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp9);
        casp9.setBounds(220, 610, 100, 40);

        casn10.setEditable(false);
        casn10.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn10.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn10.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn10);
        casn10.setBounds(120, 580, 100, 30);

        casp11.setEditable(false);
        casp11.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp11);
        casp11.setBounds(20, 610, 100, 40);

        casn12.setEditable(false);
        casn12.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn12.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn12);
        casn12.setBounds(20, 510, 100, 30);

        casp13.setEditable(false);
        casp13.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp13);
        casp13.setBounds(20, 470, 100, 40);

        casn13.setEditable(false);
        casn13.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn13.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn13.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn13);
        casn13.setBounds(20, 440, 100, 30);

        casp14.setEditable(false);
        casp14.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp14);
        casp14.setBounds(20, 400, 100, 40);

        casn14.setEditable(false);
        casn14.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn14.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn14.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn14);
        casn14.setBounds(20, 370, 100, 30);

        casp15.setEditable(false);
        casp15.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp15);
        casp15.setBounds(120, 400, 100, 40);

        casn15.setEditable(false);
        casn15.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn15.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn15.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn15);
        casn15.setBounds(120, 370, 100, 30);

        casp20.setEditable(false);
        casp20.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp20);
        casp20.setBounds(20, 120, 100, 40);

        casn20.setEditable(false);
        casn20.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn20.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn20.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn20);
        casn20.setBounds(20, 90, 100, 30);

        casp12.setEditable(false);
        casp12.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp12.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp12);
        casp12.setBounds(20, 540, 100, 40);

        casp16.setEditable(false);
        casp16.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp16);
        casp16.setBounds(120, 330, 100, 40);

        casn16.setEditable(false);
        casn16.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn16.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn16.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn16);
        casn16.setBounds(120, 300, 100, 30);

        casp17.setEditable(false);
        casp17.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp17);
        casp17.setBounds(120, 260, 100, 40);

        casn17.setEditable(false);
        casn17.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn17.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn17);
        casn17.setBounds(120, 230, 100, 30);

        casp18.setEditable(false);
        casp18.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp18.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp18);
        casp18.setBounds(20, 260, 100, 40);

        casn18.setEditable(false);
        casn18.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn18.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn18.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn18);
        casn18.setBounds(20, 230, 100, 30);

        casp19.setEditable(false);
        casp19.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        casp19.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casp19);
        casp19.setBounds(20, 190, 100, 40);

        casn19.setEditable(false);
        casn19.setFont(new java.awt.Font("Ubuntu", 1, 9)); // NOI18N
        casn19.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        casn19.setSelectedTextColor(new java.awt.Color(1, 1, 1));
        getContentPane().add(casn19);
        casn19.setBounds(20, 160, 100, 30);

        SalirjButton.setText("Salir");
        SalirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SalirjButton);
        SalirjButton.setBounds(1040, 570, 100, 24);

        TerminarJuegojButton.setText("Terminar Juego");
        TerminarJuegojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TerminarJuegojButtonActionPerformed(evt);
            }
        });
        getContentPane().add(TerminarJuegojButton);
        TerminarJuegojButton.setBounds(990, 20, 200, 24);

        LanzarDadosjButton.setText("Lanzar Dados");
        LanzarDadosjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LanzarDadosjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(LanzarDadosjButton);
        LanzarDadosjButton.setBounds(990, 320, 200, 24);

        VerMisPropiedadesjButton.setText("Ver Mis Propiedades");
        VerMisPropiedadesjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VerMisPropiedadesjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(VerMisPropiedadesjButton);
        VerMisPropiedadesjButton.setBounds(990, 370, 200, 24);

        ConstruirjButton.setText("Construir En Propiedad");
        ConstruirjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConstruirjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ConstruirjButton);
        ConstruirjButton.setBounds(990, 410, 200, 24);

        BancaRotajButton.setText("Declarar Bancarota");
        BancaRotajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BancaRotajButtonActionPerformed(evt);
            }
        });
        getContentPane().add(BancaRotajButton);
        BancaRotajButton.setBounds(990, 450, 200, 24);

        TerminarTurnojButton.setText("Terminar Turno");
        TerminarTurnojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TerminarTurnojButtonActionPerformed(evt);
            }
        });
        getContentPane().add(TerminarTurnojButton);
        TerminarTurnojButton.setBounds(990, 490, 200, 24);

        GuardarjButton.setText("Guardar");
        GuardarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(GuardarjButton);
        GuardarjButton.setBounds(1040, 540, 100, 24);

        jLabel7.setFont(new java.awt.Font("Ubuntu", 0, 19)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("dinero del jugador");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(990, 120, 190, 23);

        NombreJuTurnojLabel.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        NombreJuTurnojLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NombreJuTurnojLabel.setText("NOMBRE JUGADOR");
        getContentPane().add(NombreJuTurnojLabel);
        NombreJuTurnojLabel.setBounds(990, 90, 190, 18);

        Dado3jTextField.setEditable(false);
        Dado3jTextField.setFont(new java.awt.Font("Ubuntu", 0, 48)); // NOI18N
        Dado3jTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Dado3jTextField.setText("0");
        getContentPane().add(Dado3jTextField);
        Dado3jTextField.setBounds(1140, 210, 60, 60);

        Dado1jTextField.setEditable(false);
        Dado1jTextField.setFont(new java.awt.Font("Ubuntu", 0, 48)); // NOI18N
        Dado1jTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Dado1jTextField.setText("0");
        getContentPane().add(Dado1jTextField);
        Dado1jTextField.setBounds(980, 210, 60, 60);

        Dado2jTextField.setEditable(false);
        Dado2jTextField.setFont(new java.awt.Font("Ubuntu", 0, 48)); // NOI18N
        Dado2jTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Dado2jTextField.setText("0");
        getContentPane().add(Dado2jTextField);
        Dado2jTextField.setBounds(1060, 210, 60, 60);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("resultado dados");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(990, 280, 200, 14);

        Jugador6jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador6jLabel.setText("Jugador 6");
        getContentPane().add(Jugador6jLabel);
        Jugador6jLabel.setBounds(550, 350, 120, 14);

        Jugador1jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador1jLabel.setText("Jugador 1");
        getContentPane().add(Jugador1jLabel);
        Jugador1jLabel.setBounds(260, 230, 120, 20);

        Jugador2jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador2jLabel.setText("Jugador 2");
        getContentPane().add(Jugador2jLabel);
        Jugador2jLabel.setBounds(410, 230, 120, 14);

        Jugador3jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador3jLabel.setText("Jugador 3");
        getContentPane().add(Jugador3jLabel);
        Jugador3jLabel.setBounds(550, 230, 120, 14);

        Jugador5jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador5jLabel.setText("Jugador 5");
        getContentPane().add(Jugador5jLabel);
        Jugador5jLabel.setBounds(410, 350, 120, 14);

        Jugador4jLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Jugador4jLabel.setText("Jugador 4");
        getContentPane().add(Jugador4jLabel);
        Jugador4jLabel.setBounds(260, 350, 120, 14);

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("esta en");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(550, 370, 120, 14);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("esta en");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(260, 250, 120, 20);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("esta en");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(410, 250, 120, 14);

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("esta en");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(550, 250, 120, 14);

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("esta en");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(260, 370, 120, 14);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("esta en");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(410, 370, 120, 14);

        casillaJugador6.setEditable(false);
        casillaJugador6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador6.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador6);
        casillaJugador6.setBounds(550, 390, 120, 40);

        casillaJugador1.setEditable(false);
        casillaJugador1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador1);
        casillaJugador1.setBounds(260, 270, 120, 40);

        casillaJugador2.setEditable(false);
        casillaJugador2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador2);
        casillaJugador2.setBounds(410, 270, 120, 40);

        casillaJugador3.setEditable(false);
        casillaJugador3.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador3);
        casillaJugador3.setBounds(550, 270, 120, 40);

        casillaJugador4.setEditable(false);
        casillaJugador4.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador4.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador4);
        casillaJugador4.setBounds(260, 390, 120, 40);

        casillaJugador5.setEditable(false);
        casillaJugador5.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        casillaJugador5.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(casillaJugador5);
        casillaJugador5.setBounds(410, 390, 120, 40);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("UBICACION DE LOS JUGADORES");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(290, 190, 360, 22);

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel2.setText("dado 1");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(990, 190, 33, 13);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel3.setText("dado 2");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(1070, 190, 33, 13);

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        jLabel4.setText("dado 3");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(1150, 190, 33, 13);

        jLabel8.setFont(new java.awt.Font("Ubuntu", 0, 19)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("TURNO DE JUGADOR");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(990, 60, 190, 23);

        DineroJugadorTurnojLabel.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        DineroJugadorTurnojLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DineroJugadorTurnojLabel.setText("Q. 00.0");
        getContentPane().add(DineroJugadorTurnojLabel);
        DineroJugadorTurnojLabel.setBounds(1000, 150, 190, 18);

        LeyendaTiempojLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        LeyendaTiempojLabel.setText("Tiempo de Juego:");
        getContentPane().add(LeyendaTiempojLabel);
        LeyendaTiempojLabel.setBounds(180, 460, 200, 30);

        HorajLabel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        HorajLabel.setText("0");
        getContentPane().add(HorajLabel);
        HorajLabel.setBounds(400, 460, 80, 30);

        jLabel16.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel16.setText("minutos : segundos ");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(590, 460, 170, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirjButtonActionPerformed
        //SE CIERRA EL FORMULARIO DEL JUEGO
        int respuesta = JOptionPane.showConfirmDialog(this, "Si cierra ahora no se guardaran lo datos del juego\n¿Desea continuar?");
        if(respuesta==JOptionPane.YES_OPTION){
            this.activacionReloj=false;
            this.FramePrincipal.habilitarPestanaJuego(true);
            this.doDefaultCloseAction();
        }
    }//GEN-LAST:event_SalirjButtonActionPerformed

    private void GuardarjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarjButtonActionPerformed
        // ESCRIBE LOS DATOS DE LA PARTIDA
        this.FramePrincipal.VerificacionRanking();
        guardarPartida();
        JOptionPane.showMessageDialog(this, "Se han guardado los cambios satisfacotriamente", "Completado", JOptionPane.INFORMATION_MESSAGE);
        actualizarRanking();
    }//GEN-LAST:event_GuardarjButtonActionPerformed
    /**
     * ACTUALIZA EL ARCHIVO DE RANKING PARA MANTENER LOS DATOS DE MODIFICACION
     */
    private void actualizarRanking()
    {
        LecturaObjeto nuevaLectura = new LecturaObjeto();
        ListaJugadores ranking=null;
        //LEEMOS EL ARCHIVO QUE CONTIENE EL RANKING Y SE CARGA EN LA INSTANCIA DE CLASE CORRECTA
        try {
            ranking = (ListaJugadores)nuevaLectura.readSerialization(this.directorioDeGuardado, "Ranking", "Ranking", ".rnk");
        } catch (ExtencionNotFoundException ex) {
            Logger.getLogger(EspacioJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(EspacioJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EspacioJInternalFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Jugador temporal = this.partidaCargada.getJugadoresDeLaPartida().getRaiz();
        int cantidadJugadores = this.partidaCargada.getJugadoresDeLaPartida().jugadoresIngresados();
        //EXTRAEMOS LA CANTIDAD DE JUGADORES EN LA PARTIDA Y SE CREA UN CICLO DE ES MISMA CANTIDAD E INGRESAMOS A JUGAODRES DE LA PARTIDA CON SU RESPECTIVO FONDO MONETARIO
        for (int i = 0; i < cantidadJugadores; i++) {
            //SI HAY UN JUGADOR CON EL MISMO NOMBRE SOLO SE ACTUALIZA EL FONDO MONERARIO
            if(ranking.buscarJugador(temporal.getNombreJugador()))
            {
                ranking.retornarJugador(temporal.getNombreJugador()).setFondos(temporal.getFondos()+this.partidaCargada.precioBienes(temporal));
            }
            else
            {
                ranking.agregar(new Jugador(temporal.getNombreJugador()));
                ranking.retornarJugador(temporal.getNombreJugador()).setFondos(temporal.getFondos()+this.partidaCargada.precioBienes(temporal));
            }
            temporal = temporal.getJugadorSiguiente();
        }
        if(ranking!=null)
        {
            EscrituraObjeto escribirObjeto = new EscrituraObjeto(this.directorioDeGuardado);
            try {
                escribirObjeto.WriteSerealizacion(ranking, "Ranking", "Ranking");
            } catch (ObjectNotSerializableExeption ex) {
                Logger.getLogger(EditarMapaJFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EditarMapaJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    /**
     * EJECUTA LAS ACCIONES DE LANZAR LOS DADOS
     */
    private void LanzarDadosjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LanzarDadosjButtonActionPerformed
        //SE EXTRAE LOS TEXTOS QEU INDICAN EL TURNO DEL JUGADOR
        this.TerminarTurnojButton.setEnabled(false);
        String nombreJugador = NombreJuTurnojLabel.getText();
        Jugador jugadorActual = this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(nombreJugador);
        // SI EL JUGADOR EN EL TURNO SE DECLARO EN BANCA ROTA EL JUEGO SALTARA AL SIGUINETE JUGADOR
        if(!jugadorActual.isEstadoBancaRota())
        {
            this.LanzarDadosjButton.setEnabled(false);
            Dado1jTextField.setText("0");
            Dado2jTextField.setText("0");
            Dado3jTextField.setText("0");
            ejecucionDados();
        }
        else
        {
            JOptionPane.showMessageDialog(this, "Has entrado en banca rota tus propiedades ahora son del banco\nGracias por participar");
            this.partidaCargada.eliminarRastroJugador(jugadorActual);
            metodosTerminarTurno();
        }
        
    }//GEN-LAST:event_LanzarDadosjButtonActionPerformed
    /**
     * Realiza las operaciones de los dados del juego
     */
    private void ejecucionDados(){
        //SE EXTRAE LA CANTIDAD DE DADOS QEU SE UTILIZA EN LA PARTIDA
        int cantidadDeDados = this.partidaCargada.getTableroDeJuego().getCantidadDeDatos();
        EspacioJInternalFrame frame =this;
        //SEGUN LA CANTRIDA DE DADOS ES LA CANTIDAD DE INSTANCIAS QUE SE GENERAN DEL MISMO
        Runnable runnable = new Runnable() {
            public void run() {
                if(cantidadDeDados==1){
                    Dados dado1 = new Dados(1);
                    dado1.setFrameOrigen(frame);
                    Thread hilodado1 = new Thread(dado1);
                    hilodado1.run();
            
                }
                if(cantidadDeDados==2){
                    Dados dado1 = new Dados(1);
                    Dados dado2 = new Dados(2);
                    dado1.setFrameOrigen(frame);
                    dado2.setFrameOrigen(frame);
                    Thread hilodado1 = new Thread(dado1);
                    Thread hilodado2 = new Thread(dado2);
                    hilodado1.run();
                    hilodado2.run();
                }
                if(cantidadDeDados==3){
                    Dados dado1 = new Dados(1);
                    Dados dado2 = new Dados(2);
                    Dados dado3 = new Dados(3);
                    dado1.setFrameOrigen(frame);
                    dado2.setFrameOrigen(frame);
                    dado3.setFrameOrigen(frame);
                    Thread hilodado1 = new Thread(dado1);
                    Thread hilodado2 = new Thread(dado2);
                    Thread hilodado3 = new Thread(dado3);
                    hilodado1.run();
                    hilodado2.run();
                    hilodado3.run();
                    
                }   
                
                frame.realizarMovimientoJugador();
            }
        };
        //SE EJECUTA UN HILO PARA LOS DADOS ASI PODER CONTINUAR EL DESARROLLO DEL TURNO DEL JUGADOR EN QEU SE LANZAN
        Thread hilo = new Thread(runnable);
        hilo.start();
    }
    /**
     * SE REALIZA EL MOVIMIENTO DEL JUGADOR EN EL TABLERO
     */
    private void realizarMovimientoJugador(){
        int numeroDeDadosDeLaPartida = this.partidaCargada.getTableroDeJuego().getCantidadDeDatos();
        //CONVERTIMOS EL RESUTADO DE LOS DADOS EN EL TABLERO
        int dado1=Integer.parseInt(Dado1jTextField.getText());
        int dado2=Integer.parseInt(Dado2jTextField.getText());
        int dado3=Integer.parseInt(Dado3jTextField.getText());
        int sumaDados =dado1+dado2+dado3;
        //EXTRAEMOS EL NOMBRE DEL JUGADOR EN EL TURNO Y LO BUSCAMOS ESTRAMOS DONDE SE ENCUENTRA Y BUSCAMOS LA CASILLA DONDE SE ENCUNTRA
        String nombreJugador = NombreJuTurnojLabel.getText();
        Jugador jugadorEnTurno = this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(nombreJugador);
        String nombreCasilla = this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(nombreJugador).getNombreCasillaUbicacion();
        Casillas casilla = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().retornarCasilla(nombreCasilla);
        //RE REALIZA UN CICLO QUE AVANZA LA CANTIDAD DE CASILLAS LIMITADO POR LA SUMA DE LOS DADOS DEL TABLERO
        for (int i = 0; i < sumaDados; i++) {
            casilla = casilla.getCasillaSiguiente();
            //SI EL JUGADOR PASA POR EL INICIO SE REALIZA EL COBRO DEL PASO POR EL MISMO
            if(casilla instanceof CasillaInicio)
            {
                String mensaje = jugadorEnTurno.getNombreJugador()+" ha pasado por inicio\nRecibe su sueldo de Q."+((CasillaInicio) casilla).getCantidadCobrar();
                JOptionPane.showMessageDialog(this,mensaje);
                float dineroResibir = this.partidaCargada.getTableroDeJuego().getCantidadDeDineroVuelta();
                jugadorEnTurno.recibirDinero(dineroResibir);
                this.actualizarDineroJugador(jugadorEnTurno);
            }
        }
        //SE ACTUALIZA LA CASILLA DE UBICACION DEL JUGADOR Y SE ACTUALIZA LOS DATOS EN PANTALLA
        jugadorEnTurno.setNombreCasillaUbicacion(casilla.getNombreCasilla());
        this.actualizarEstadoJugadores();
        // SI LOS DADOS SON IGUALES SE VUELVE A REALIZAR LA ACCION DE LANZAR DADOS
        if(numeroDeDadosDeLaPartida==2&&(dado1==dado2))
        {
            //SE SUMA LA CANTIDAD DE TIROS IGUALES
            tirosDeDadoEnTurno++;
            // SI LA CANTIDAD DE TIROS ES IGUAL A 3 ESTE AUTOMATICAMENTE MANDA AL JUGADOR A A LA CARCEL
            if(tirosDeDadoEnTurno==3)
            {
                JOptionPane.showMessageDialog(this,"Parece que haces trampa ve a la carcel");
                jugadorEnTurno.setNombreCasillaUbicacion("Carcel");
                jugadorEnTurno.setTurnosPerdidos(4);
                jugadorEnTurno.setEstadoCarcel(true);
                actualizarEstadoJugadores();
                tirosDeDadoEnTurno=0;
                this.TerminarTurnojButton.setEnabled(true);
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Dados Iguales puede volver a tirar");
                ejecucionDados();
            }
        }
        else
        {
            if(numeroDeDadosDeLaPartida==3&&(dado1==dado2&&dado2==dado3))
            {
                tirosDeDadoEnTurno++;
                if(tirosDeDadoEnTurno==3)
                {
                    JOptionPane.showMessageDialog(this,"Parece que haces trampa ve a la carcel");
                    jugadorEnTurno.setNombreCasillaUbicacion("Carcel");
                    jugadorEnTurno.setTurnosPerdidos(4);
                    jugadorEnTurno.setEstadoCarcel(true);
                    actualizarEstadoJugadores();
                    tirosDeDadoEnTurno=0;
                    this.TerminarTurnojButton.setEnabled(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(this,"Dados Iguales puede volver a tirar");
                    ejecucionDados();
                }
            }
            else
            {
                if(!(casilla instanceof CasillaInicio))
                {
                     verificarCasilla(casilla,jugadorEnTurno);
                }
                this.TerminarTurnojButton.setEnabled(true);
            }
        }
    }
    /**
     * REALIZA LAS ACCIONES AL CAER EN UN TIPO DE CASILLA ESPESIFICO
     * @param casillaVerificar  instancia de la casilla a verificar
     * @param jugadorEnTurno    jugador del turno
     */
    private void verificarCasilla(Casillas casillaVerificar, Jugador jugadorEnTurno){
        //EXTRAEMOS EL NOMBRE DEL JUGADOR Y EL NOMBRE LA CASILLA PARA MAS TARDE UTILIZARLO EN LA PARTE GRAFICA
        String nombreJugadorEnTurno = jugadorEnTurno.getNombreJugador();
        String nombreCasillaVerificar = casillaVerificar.getNombreCasilla();
        // VERIFIACMOS A PRIMER NIEVL A QUE TIPO DE INSTANCIA PERTENECE
        if(casillaVerificar instanceof CasillaTrampaCambiarCasilla)
        {
            //VERIFICAMOS EN NOMBBRE DE LA CASILLA Y REALIZAMOS LA ACCION ENLAZADA A ESTA CASILLA
            if(nombreCasillaVerificar.equals("Vaya a la carcel"))
            {
                String mensaje = nombreJugadorEnTurno+" ah sido atrapado, dirijase a la carcel";
                JOptionPane.showMessageDialog(this, mensaje);
                jugadorEnTurno.setNombreCasillaUbicacion("Carcel");
                jugadorEnTurno.setTurnosPerdidos(4);
                jugadorEnTurno.setEstadoCarcel(true);
                this.actualizarEstadoJugadores();
            }
        }
        if(casillaVerificar instanceof CasillaPropiedad){
            CasillaPropiedad casillaPropiedadVerificar =((CasillaPropiedad) casillaVerificar);
            //VERIFICAMSO SI LA CASILLA TIENE UN DUENO
            if(casillaPropiedadVerificar.getJugadorDuenio().equals(""))
            {   
                //SI NO TIENE DUENO LA CASILLA SE LANZA A PANTALLA SI DEA CONPRAR LA PROPIEDAD
                String mensaje = nombreJugadorEnTurno+" ah caido en "+nombreCasillaVerificar+"\n¿Desea comparar la propiedad?";
                int respuesta=JOptionPane.showConfirmDialog(this, mensaje);
                if(respuesta==JOptionPane.YES_OPTION)
                {
                    //SI LA RESPUESTA ES CORRECTA VERIFICASMOS LA CANTIDAD DE DINERO DEL JUGADOR
                    if(jugadorEnTurno.getFondos()>casillaPropiedadVerificar.getPrecioCompra())
                    {
                        //SI LA CANTIDAD DE DINERO ES SUFICIENTE ENTONECES SE REALIZA LA COMPRA DE LA PROPIEDAD
                        jugadorEnTurno.pagarMulta(casillaPropiedadVerificar.getPrecioCompra());
                        casillaPropiedadVerificar.setJugadorDuenio(jugadorEnTurno.getNombreJugador());
                        mensaje = nombreJugadorEnTurno+" ahora eres propietario de "+casillaPropiedadVerificar.getNombreCasilla();
                        JOptionPane.showMessageDialog(this, mensaje);
                        actualizarDineroJugador(jugadorEnTurno);
                    }
                    else
                    {
                        mensaje = nombreJugadorEnTurno+" no tines el dinero suficiente para adquirir "+casillaPropiedadVerificar.getNombreCasilla();
                        JOptionPane.showMessageDialog(this, mensaje);
                    }
                    
                }
            }
            else
            {
                //SI LA CASILLA YA TENIA SUENO VERIFICASMOS SI EL DUENO ES EL MISMO JUGADOR
                if(!casillaPropiedadVerificar.getJugadorDuenio().equals(jugadorEnTurno.getNombreJugador()))
                {
                    //SI EL DUENO ES UN JUGADOR DIFERENTE VERIFICASMOS SI LA CASILLA ESTA EN ESTADO DE HIPOTECA
                    if(!casillaPropiedadVerificar.getEstadoHipoteca())
                    {
                        // SI LA CASILLA NO ESTA HIPOTECADA VERIFICAMOS NUEVAMENTE POR TIPO DE INSTANCIA EN ESTA CASO EN AL DIVICION DE PROPIEDAD
                        float montoAPagar =0;
                        if(casillaVerificar instanceof CasillaPropiedadEstacion)
                        {
                            //SI LA CASILLA ES DE TIPO CASILLA DE ESTACION
                            String  duenoDeLaPropiedad = ((CasillaPropiedadEstacion) casillaVerificar).getJugadorDuenio();
                            //CONTAMOS LAS PROPIEDADES DEL MISM TIPO QUE TIENE EL JUGADOR CONTRINCANTE PARA HACER EK CALCULO DEL PAGO A HACER
                            Object obj = contarPorTipo(duenoDeLaPropiedad, "N/A", "PropiedadEstacion");
                            //SI EL RESULTADO ES DE TIPO ENTERO
                            if(obj instanceof Integer)
                            {
                                //REALIZAMOS LA SUBTRACCION DE DINERO DEL JUGADOR QUE CALLO EN LA CASILLA
                                int cantidad = (int)obj;
                                float costoDeEstancia = ((CasillaPropiedadEstacion)casillaVerificar).getCostoUsoEstacion();
                                int resultado = (int) Math.pow(2, (cantidad-1));
                                montoAPagar=costoDeEstancia*resultado;
                            }
                            
                        }
                        if(casillaVerificar instanceof CasillaPropiedadLugar)
                        {
                            //SI LA PRIPIEDAD ES DE LUGAR
                            //EXTRAEMOS LAS CARACTERISTICAS DE LA PROPIEDAD PARA HACER LAS COMPRACIONES
                            int canCasas=((CasillaPropiedadLugar) casillaVerificar).getCantidadCasas();
                            int canHoteles=((CasillaPropiedadLugar) casillaVerificar).getCantidadHoteles();
                            float aumentoCasa = ((CasillaPropiedadLugar) casillaVerificar).getCostoEstanciaAumentadoCadaCasa();
                            float aumentoHotel = ((CasillaPropiedadLugar) casillaVerificar).getCostoEstanciaAumentadoCadaHotel();
                            if(canCasas==0&&canHoteles==0)
                            {
                                //SI LA CANTIDAD DE CASAS Y HOTELES SON 0 SE HACE SOLO EL PAGO DE LA INSTANCIA
                                String  duenoDeLaPropiedad = ((CasillaPropiedadLugar) casillaVerificar).getJugadorDuenio();
                                String  colorDelGrupoDeLaPropiedad = ((CasillaPropiedadLugar) casillaVerificar).getGrupoPropiedad();
                                // SE VERIFICA SI EL JUGADOR TIENE TODAS LAS PROPIEDADES DEL MISMO GRUPO PARA REEALIZAR OTRO TIPO DE COBRO
                                Object obj = contarPorTipo(duenoDeLaPropiedad, colorDelGrupoDeLaPropiedad, "PropiedadLugar");
                                if(obj instanceof Boolean)
                                {
                                    //SI EL RESULTADO ES DE TIPO BOOLEANO 
                                    boolean resultado =(boolean)obj;
                                    //ANALIZAMOS EL RESULTADO Y COMBRAMOS DE UNA FORMA U OTRA
                                    if(resultado)
                                    {
                                        montoAPagar=((CasillaPropiedadLugar) casillaVerificar).getCostoEstancia()*2;
                                    }
                                    else
                                    {
                                        montoAPagar=((CasillaPropiedadLugar) casillaVerificar).getCostoEstancia();
                                    }
                                }
                            }
                            else
                            {
                                //SI LA PROPIEDAD POSEE CASAS Y HOTELES DEBEMSO DE HACER EL CALCULO CON CADA UNA DE ELLAS
                                montoAPagar=((CasillaPropiedadLugar)casillaVerificar).getCostoEstancia()+(canCasas*aumentoCasa)+(canHoteles*aumentoHotel);
                            }
                        }
                        if(casillaVerificar instanceof CasillaPropiedadServicioBasico)
                        {
                            //SI LA CASILLLA ES DE SERVICIO BASICO
                            String  duenoDeLaPropiedad = ((CasillaPropiedadServicioBasico) casillaVerificar).getJugadorDuenio();
                            //VERRIFICASMOS SI EL JUGADOR POSEE MAS PROPIEDADES DEL MISMO TIPO
                            Object obj = contarPorTipo(duenoDeLaPropiedad, "N/A", "PropiedadServicio");
                            if(obj instanceof Integer)
                            {
                                //SU EL RESULTADO ES DE TIPO ENTERO EL COBRO SE REALIZA CON LA CANTIDAD DE PROPIEDADES QUE SE TIENEN DEL MISMO TIPO
                                int cantidad = (int)obj;
                                montoAPagar=((CasillaPropiedadServicioBasico)casillaVerificar).getCostoServicio()*cantidad;
                            }
                            
                        }
                        //MOSTRAMOS DE MANERA GRAFICA LOS CALCULOS Y LA CNATIDA QEI EL JUGADOR TIENE QUE PAGAR
                        Jugador jugadorAPagar = this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(casillaPropiedadVerificar.getJugadorDuenio());
                        String mensaje = nombreJugadorEnTurno+" ah caido en "+nombreCasillaVerificar+"\nDebe pagar  Q."+montoAPagar +" por pago de estancia!!!!";
                        JOptionPane.showMessageDialog(this, mensaje);
                        jugadorEnTurno.pagarMulta(montoAPagar);
                        jugadorAPagar.recibirDinero(montoAPagar);
                        actualizarDineroJugador(jugadorEnTurno);
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(this, "Propiedad hipotecada puede pasar sin pagar estancia");
                    }
                    
                }
                
            }
        }
        if(casillaVerificar instanceof CasillaTomaTarjeta){
            ///SI LA CASILLA PERTENCE AL GRUOPO DE TOMAR TARJETA EXTRAEMOS LOS DATOS DE LA CASILLA
            CasillaTomaTarjeta casillaTomarTrajeta = (CasillaTomaTarjeta)casillaVerificar;
            String tipoCasillaTomar = casillaTomarTrajeta.getGrupoDeTarjeta();
            ListaTarjeta tarjetasCupon = this.partidaCargada.getTableroDeJuego().getTarjetasCupon();
            ListaTarjeta tarjetasBolsa = this.partidaCargada.getTableroDeJuego().getTarjetasBolsa();
            //VERIFICAMSO EL TIPO DE CASILLAS SI ES CUPON O BOLSA
            //SEGUN EL TIPO DE CASILLA TOMAMOS DEL GRUPO Y REALIZAMOS LA ACCION QEU NOS MANDA LA TRAJETA QUE SE ESPESIFICA EN OTRA FUNCION
            if(tipoCasillaTomar.equals("Cupon")){
                Tarjetas tarjetasTomadaCupon = tarjetasCupon.getRaiz();
                JOptionPane.showMessageDialog(this, tarjetasTomadaCupon.getDescripcionTarjeta());
                operacionDeTarjeta(tarjetasTomadaCupon, jugadorEnTurno);
                this.partidaCargada.getTableroDeJuego().getTarjetasCupon().reordenarTarjetas();
            }
            if(tipoCasillaTomar.equals("Bolsa")){
                Tarjetas tarjetaTomadaBolsa = tarjetasBolsa.getRaiz();
                JOptionPane.showMessageDialog(this, tarjetaTomadaBolsa.getDescripcionTarjeta());
                operacionDeTarjeta(tarjetaTomadaBolsa, jugadorEnTurno);
                this.partidaCargada.getTableroDeJuego().getTarjetasBolsa().reordenarTarjetas();
            }
        }
        if(casillaVerificar instanceof CasillaTrampaPagarMulta){
            CasillaTrampaPagarMulta casillaTrampaPagarMulta = (CasillaTrampaPagarMulta)casillaVerificar;
            float montoMulta=casillaTrampaPagarMulta.getMultaPagar();
            String mensaje = "Cayó en "+casillaVerificar.getNombreCasilla()+" debe pagar Q."+montoMulta+" por pago de impuestos";
            JOptionPane.showMessageDialog(this, mensaje);
            jugadorEnTurno.pagarMulta(montoMulta);
            actualizarDineroJugador(jugadorEnTurno);
        }
        if(casillaVerificar instanceof CasillaNeutral)
        {
            String mensaje = jugadorEnTurno.getNombreJugador()+" pude descansar un momento";
            JOptionPane.showMessageDialog(this, mensaje);
        }
        if(casillaVerificar instanceof CasillaCarcel)
        {
            String mensaje = jugadorEnTurno.getNombreJugador()+" NO SE ASUSTE SOLAMENTE ES DE PASADITA!!!";
            JOptionPane.showMessageDialog(this, mensaje);
        }
       if(casillaVerificar instanceof CasillaInicio)
        {
            //REALIZA LA ACCION DE RECIBIR DINERO
            String mensaje = jugadorEnTurno.getNombreJugador()+" ha pasado por inicio\nRecibe su sueldo de Q."+((CasillaInicio) casillaVerificar).getCantidadCobrar();
            JOptionPane.showMessageDialog(this,mensaje);
            float dineroResibir = this.partidaCargada.getTableroDeJuego().getCantidadDeDineroVuelta();
            jugadorEnTurno.recibirDinero(dineroResibir);
            actualizarDineroJugador(jugadorEnTurno);
        }
    }
    /**
     * REALIZA UNA ACCION DEPENDIENTO DEL GRUPO DE LA TARJETA
     */
    private void operacionDeTarjeta(Tarjetas tarjetaAProcesar,Jugador jugadorDelTurno){
        //VERIFICAMOS AL QUE TIPO DE INSTANCIA PERTENECE LA TARJETA QEU SE A TOMADO
        if(tarjetaAProcesar instanceof TarjetaCaminar)
        {
          ListaCasilla casillasDelJuego = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero();
          String tipoCasilla=((TarjetaCaminar) tarjetaAProcesar).getTipoCasilla();
          String nombreCasillaUbicacion = jugadorDelTurno.getNombreCasillaUbicacion();
          Casillas casillaDeUbicacion = casillasDelJuego.retornarCasilla(nombreCasillaUbicacion);
          //SEGUN EL TIPO EL DESTINO DE LA TARJETA DEBEMOS DE AVANZAR Y VERIFICAR LA CASILLA DE DESTINO
          if(tipoCasilla.equals("CasillaPropiedadEstacion"))
          {
              while (!(casillaDeUbicacion instanceof CasillaPropiedadEstacion)) {                  
                  casillaDeUbicacion=casillaDeUbicacion.getCasillaSiguiente();
              }
              jugadorDelTurno.setNombreCasillaUbicacion(casillaDeUbicacion.getNombreCasilla());
              verificarCasilla(casillaDeUbicacion, jugadorDelTurno);
          }
          if(tipoCasilla.equals("CasillaPropiedadServicioBasico"))
          {
              while (!(casillaDeUbicacion instanceof CasillaPropiedadServicioBasico)) {                  
                  casillaDeUbicacion=casillaDeUbicacion.getCasillaSiguiente();
              }
              verificarCasilla(casillaDeUbicacion, jugadorDelTurno);
              jugadorDelTurno.setNombreCasillaUbicacion(casillaDeUbicacion.getNombreCasilla());
          }
          this.actualizarEstadoJugadores();
        }
        if(tarjetaAProcesar instanceof TarjetaCarcel)
        {
            //ENVIA EL JUGADOR A LA CARCEL Y HABILITA TODO LO REFERENTE CON LA CARCEL ENE L JUGADOR
            jugadorDelTurno.setNombreCasillaUbicacion("Carcel");
            jugadorDelTurno.setEstadoCarcel(((TarjetaCarcel) tarjetaAProcesar).getEstadoCarcel());
            jugadorDelTurno.setTurnosPerdidos(4);
            this.actualizarEstadoJugadores();
          
        }
        if(tarjetaAProcesar instanceof TarjetaMovarACasilla)
        {
            //EXTRAE LA INFROMACION Y REALIZA LA ACCION DE MOVER A LA CASILLA DEL JUGADOR
            jugadorDelTurno.setNombreCasillaUbicacion(((TarjetaMovarACasilla) tarjetaAProcesar).getCasillaAMover());
            Casillas casilla = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().retornarCasilla(((TarjetaMovarACasilla) tarjetaAProcesar).getCasillaAMover());
            verificarCasilla(casilla,jugadorDelTurno);
            this.actualizarEstadoJugadores();
        }
        if(tarjetaAProcesar instanceof TarjetaMulta)
        {
            //REALIZA EL COBRO DE LA MULTA DEL JUGADOR
          jugadorDelTurno.pagarMulta(((TarjetaMulta) tarjetaAProcesar).getDineroAExtraer());
          actualizarDineroJugador(jugadorDelTurno);
        }
        if(tarjetaAProcesar instanceof TarjetaPagoJugadores)
        {
            //REALIZA EL PAGO A LOS JUGADORES DEL JEUGO
            float dineroAPagar = ((TarjetaPagoJugadores) tarjetaAProcesar).getPagoJugadores();
            this.partidaCargada.pagoJugadores(jugadorDelTurno, dineroAPagar); 
            actualizarDineroJugador(jugadorDelTurno);
        }
        if(tarjetaAProcesar instanceof TarjetaPerderTurno)
        {
            //ASIGNA LA CANTIAD DE TURNOS A PERDER EN EL JUGADOR
          jugadorDelTurno.setTurnosPerdidos(((TarjetaPerderTurno) tarjetaAProcesar).getTurnosAPerder());
        }
        if(tarjetaAProcesar instanceof TarjetaPersonalizada)
        {
            //EXTRE LOS DADOS DE LA TAEJTA
          float dineroRecibir = ((TarjetaPersonalizada) tarjetaAProcesar).getDineroARecibir();
          float dineroPagar = ((TarjetaPersonalizada) tarjetaAProcesar).getDineroAPagar();
          float dineroPagarJugadres = ((TarjetaPersonalizada) tarjetaAProcesar).getDineroPagarJugadores();
          int turnoPerdidos = ((TarjetaPersonalizada) tarjetaAProcesar).getTurnosPerdidos();
          String nombreCasillaDestino = ((TarjetaPersonalizada) tarjetaAProcesar).getNombreCasillaDestino();
          //VERIFICAMOS SI EXISTE UNA CASILLA DE DESTINO 
          if(!(nombreCasillaDestino.equals("")))
          {
              //SI HAY CASILLA DE DESTINO BUSCAMOS LA CASILLA Y REALIZAMOS EL MOVIMEINTO DEL JUAGDOR
              Casillas casillaProcesar = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().retornarCasilla(nombreCasillaDestino);
              this.verificarCasilla(casillaProcesar, jugadorDelTurno);
              jugadorDelTurno.setNombreCasillaUbicacion(nombreCasillaDestino);
              this.actualizarEstadoJugadores();
          }
          jugadorDelTurno.recibirDinero(dineroRecibir);
          jugadorDelTurno.pagarMulta(dineroPagar);
          this.partidaCargada.pagoJugadores(jugadorDelTurno, dineroPagarJugadres);
          jugadorDelTurno.setTurnosPerdidos(turnoPerdidos);
          this.actualizarDineroJugador(jugadorDelTurno);
        }
        if(tarjetaAProcesar instanceof TarjetaPremio)
        {
            //ASIGAN UNA CANTIDAD DE DINERO AL JUGADOR
          jugadorDelTurno.recibirDinero(((TarjetaPremio) tarjetaAProcesar).getDineroRecibir());
          actualizarDineroJugador(jugadorDelTurno);
        }
        if(tarjetaAProcesar instanceof TarjetaSalirCarcel)
        {

            ListaTarjeta tarjetasDelJugador = jugadorDelTurno.getTarjetas();
            //SE ALMACENA LA TARJETA EN EL JUGADOR
            if(tarjetaAProcesar.getGrupoTomaTarjeta().equals("Cupon"))
            {
                this.partidaCargada.getTableroDeJuego().getTarjetasCupon().eliminarDeVaraja(tarjetaAProcesar);
            }
            if(tarjetaAProcesar.getGrupoTomaTarjeta().equals("Bolsa"))
            {
                this.partidaCargada.getTableroDeJuego().getTarjetasBolsa().eliminarDeVaraja(tarjetaAProcesar);
            }
            tarjetasDelJugador.agregar(tarjetaAProcesar);
            jugadorDelTurno.setTarjetas(tarjetasDelJugador);
          
        }
        
    }
    private void TerminarTurnojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TerminarTurnojButtonActionPerformed
        metodosTerminarTurno();             
    }//GEN-LAST:event_TerminarTurnojButtonActionPerformed
    /**
     * REALIZA LOS PASOS PARA TENRMIAR UN TURNO
     */
    private void metodosTerminarTurno(){
        //REINICIA LOS TIROS DE LOS DADOS Y EL PODER LANZAR LOS DADOS NUEVAMENTE Y EXTRAMOS LOS DATOS DE TERMINA EL TURNO ACTUAL
        this.tirosDeDadoEnTurno=0;
        this.LanzarDadosjButton.setEnabled(true);
        String nombreJugador = NombreJuTurnojLabel.getText();
        Jugador jugadorActual = this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(nombreJugador);
        Jugador jugadorSiguiente = jugadorActual.getJugadorSiguiente();
        //VERFIFICAMOS SI EL JUGADOR TIENE TURNOS PERDIDO
        if(jugadorSiguiente.getTurnosPerdigos()==0)
        {
            // VERIFIACMOS SI EL JUAGDOR EST EN BANCA ROTA
            if(!jugadorSiguiente.isEstadoBancaRota())
            {
                //SE ACTUALIZAN LOS DATOS DEL JUGADOR DEL TURNO NUEVO
                String nombreJugadorSiguiente = jugadorSiguiente.getNombreJugador();
                NombreJuTurnojLabel.setText(nombreJugadorSiguiente);
                actualizarDineroJugador(jugadorSiguiente);
            }
            else
            {
                //REALIZA UN CICLO PARA LA BUSQUEDA DE UN JUGADOR SIN BANCA ROTA O TRUNOS PERDIDOS
                while(jugadorSiguiente.isEstadoBancaRota()||!(jugadorSiguiente.getTurnosPerdigos()==0))
                {
                    //VERIFIAC NUEVAMENTE SI EL JUGADOR ESTA EN BANCAROTA
                    if(!jugadorSiguiente.isEstadoBancaRota())
                    {
                        //SI NO ESTA EN BANCA ROTA SE VERIFICA SI ESTE ESTA EN LA CARCEL Y SI TIENETRAEJTA PARA SALIR DE LA MISMA
                        jugadorSiguiente.descontarTurnosPerdidos();
                        if(jugadorSiguiente.getTarjetas().getRaiz()!=null&&jugadorSiguiente.isEstadoCarcel())
                        {
                            // SI SE TIENE LA TAREJETA SE HABLRE UN CUADRO DE DAILOGO PARA DECIDIR USARLA O NO
                            int respuesta =JOptionPane.showConfirmDialog(this, "Parece que tiene tarjeta para sali de la carcel desea utilizarla");
                            if(respuesta==JOptionPane.YES_OPTION)
                            {
                                Tarjetas salir = jugadorSiguiente.getTarjetas().getRaiz();
                                jugadorSiguiente.getTarjetas().eliminarDeVaraja(salir);
                                if(salir.getGrupoTomaTarjeta().equals("Cupon"))
                                {
                                    this.partidaCargada.getTableroDeJuego().getTarjetasCupon().agregar(salir);
                                }
                                if(salir.getGrupoTomaTarjeta().equals("Bolsa"))
                                {
                                    this.partidaCargada.getTableroDeJuego().getTarjetasBolsa().agregar(salir);
                                }
                                jugadorSiguiente.setTurnosPerdidos(0);
                                jugadorSiguiente.setEstadoCarcel(false);
                            }
                            else
                            {
                                jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                            }
                        }
                        else
                        {
                            jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                        }
                    }
                    else
                    {
                        jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                    }
                }
                //AVANZAMOS UN JUGADOR SIGUNETE EN EL CICLO
                String nombreJugadorSiguiente = jugadorSiguiente.getNombreJugador();
                NombreJuTurnojLabel.setText(nombreJugadorSiguiente);
                actualizarDineroJugador(jugadorSiguiente);
            }
        }
        else       
        {
            //SI EL JUGADOR TIENE TURNOS PERDIDOS VERIFICAMOS SI NO ESTA EN BANCA ROTA
            //REALIZA UN CICLO PARA BUSCAR UN JUGADOR SIN TUENO PERDIDOS Y NO ESTE EN BANCA ROTA
            while(!(jugadorSiguiente.getTurnosPerdigos()==0)||jugadorSiguiente.isEstadoBancaRota())
            {
                //VERIFICAMOS NUEVAMENETE SIE EL JUGADOR NO ESTA EN BANCA ROTA
                if(!jugadorSiguiente.isEstadoBancaRota())
                {
                    //DESCONTAMOS LOS TRUNOS DEL JUGADORES QUE HAN PERDIDO UN TURNO
                    jugadorSiguiente.descontarTurnosPerdidos();
                    //VERFICAMOS SI EL JUGADOR TIENE UN TARJETA PARA SALIR DE LA CARCEL
                    if(jugadorSiguiente.getTarjetas().getRaiz()!=null&&jugadorSiguiente.isEstadoCarcel())
                    {
                        ///SI EL JUGAR POSEE EUN TARJETA SE PREGUNTA AL USUARIO SI EL DECIDE UTILIZARLA
                        int respuesta =JOptionPane.showConfirmDialog(this, "Parece que tiene tarjeta para sali de la carcel desea utilizarla");
                        if(respuesta==JOptionPane.YES_OPTION)
                        {
                            Tarjetas salir = jugadorSiguiente.getTarjetas().getRaiz();
                            jugadorSiguiente.getTarjetas().eliminarDeVaraja(salir);
                            if(salir.getGrupoTomaTarjeta().equals("Cupon"))
                            {
                                this.partidaCargada.getTableroDeJuego().getTarjetasCupon().agregar(salir);
                            }
                            if(salir.getGrupoTomaTarjeta().equals("Bolsa"))
                            {
                                this.partidaCargada.getTableroDeJuego().getTarjetasBolsa().agregar(salir);
                            }
                                jugadorSiguiente.setTurnosPerdidos(0);
                                jugadorSiguiente.setEstadoCarcel(false);
                            }
                            else
                            {
                                jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                            }
                        }
                    else
                    {
                        jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                    }
                }
                else
                {
                    jugadorSiguiente=jugadorSiguiente.getJugadorSiguiente();
                }
                
            }
            // AVANZAMOS LOS JUGADORES EN EL CICLO
            String nombreJugadorSiguiente = jugadorSiguiente.getNombreJugador();
            NombreJuTurnojLabel.setText(nombreJugadorSiguiente);
            actualizarDineroJugador(jugadorSiguiente);
        }
    }
    /**
     * SE CUENTAN LA CANTIDADAD DE PORPIEDADES QUE SE POEE DE UN TIPO
     * @param jugadorDuenio nombre del jugador duenio
     * @param colorPropiedad    color de la propiedad
     * @param tipoPropiedad tipo de propiedad
     * @return  numero entero o boleano
     */
    private Object contarPorTipo(String jugadorDuenio, String colorPropiedad,String tipoPropiedad)
    {
        Object resultado= null;
        //evalumos el tipo de propiedad a procesar
        if(tipoPropiedad.equals("PropiedadLugar"))
        {
            int contador=0;
            Casillas temporal = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().getRaiz();
            //se buscan las casillas con la cualidades ingresadas
            for (int i = 0; i < 40; i++) {
                
                if(temporal instanceof CasillaPropiedadLugar)
                {
                    boolean premisa1=((CasillaPropiedadLugar) temporal).getJugadorDuenio().equals(jugadorDuenio);
                    boolean premisa2=((CasillaPropiedadLugar) temporal).getGrupoPropiedad().equals(colorPropiedad);
                    
                    if(premisa1&&premisa2)
                    {
                        contador++;
                    }
                }
                temporal=temporal.getCasillaSiguiente();
            }
            boolean confirmacion = false;
            resultado=confirmacion;
            //envia el resultado por medio de un boolebno si se posee todas las porpiedades de un tipo / color de la propiedad 
            if(colorPropiedad.equals("Rojo")&&contador==ROJO)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Amarillo")&&contador==AMARILLO)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Cafe")&&contador==CAFE)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Naranja")&&contador==NARANJA)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Verde Claro")&&contador==VERDECLARO)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Azul")&&contador==AZUL)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Rosa")&&contador==ROSA)
            {
                resultado=confirmacion=true;
            }
            if(colorPropiedad.equals("Verde")&&contador==VERDE)
            {
                resultado=confirmacion=true;
            }
        }
        if(tipoPropiedad.equals("PropiedadServicio"))
        {
            // se cuentan la cantidad de propiedades del tipo y regresa la cantidad asignada
            int contador=0;
            Casillas temporal = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().getRaiz();
            for (int i = 0; i < 40; i++) {
                
                if(temporal instanceof CasillaPropiedadServicioBasico)
                {
                    boolean premisa1=((CasillaPropiedadServicioBasico) temporal).getJugadorDuenio().equals(jugadorDuenio);
                    if(premisa1)
                    {
                        contador++;
                    }
                }
                temporal=temporal.getCasillaSiguiente();
            }
            resultado=contador;
            
        }
        if(tipoPropiedad.equals("PropiedadEstacion")){
            int contador=0;
            Casillas temporal = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().getRaiz();
            // se cuentan la cantidad de propiedades del tipo y regresa la cantidad asignada
            for (int i = 0; i < 40; i++) {
                
                if(temporal instanceof CasillaPropiedadEstacion)
                {
                    boolean premisa1=((CasillaPropiedadEstacion) temporal).getJugadorDuenio().equals(jugadorDuenio);
                    if(premisa1)
                    {
                        contador++;
                    }
                }
                temporal=temporal.getCasillaSiguiente();
            }
            resultado=contador;
        }
        return resultado;
    }
    private void actualizarDineroJugador(Jugador jugadorDelTurno){
        String cantidad = "Q."+jugadorDelTurno.getFondos();
        DineroJugadorTurnojLabel.setText(cantidad);
    }
    private void ConstruirjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConstruirjButtonActionPerformed
        //se genera un formulario para la construccion de las casas del tablero
        String nombreJugador = NombreJuTurnojLabel.getText();
        ListaCasilla casillasDelTablero = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero();
        ListaJugadores jugadoresDelTablero = this.partidaCargada.getJugadoresDeLaPartida();
        Jugador jugadorDelTurno = jugadoresDelTablero.retornarJugador(nombreJugador);
        int limiteCasas =this.partidaCargada.getTableroDeJuego().getLimiteDeCasas();
        int limiteHoteles =  this.partidaCargada.getTableroDeJuego().getLimiteDeHoteles();
        ConstruirEnPropiedadJDialog contruir = new ConstruirEnPropiedadJDialog(this.FramePrincipal, true, casillasDelTablero, jugadorDelTurno,limiteCasas,limiteHoteles);
        contruir.setVisible(true);
        this.actualizarDineroJugador(jugadorDelTurno);
    }//GEN-LAST:event_ConstruirjButtonActionPerformed
    
    private void VerMisPropiedadesjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VerMisPropiedadesjButtonActionPerformed
        //se genrea un fomrulacio par ala visualoizacion de las propiedades mandando los datos en memoria
        String nombreJugador = NombreJuTurnojLabel.getText();
        ListaCasilla casillasDelTablero = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero();
        ListaJugadores jugadoresDelTablero = this.partidaCargada.getJugadoresDeLaPartida();
        Jugador jugadorDelTurno = jugadoresDelTablero.retornarJugador(nombreJugador);
        float porcentajeHipoteca = this.partidaCargada.getTableroDeJuego().getPorcentajeInteresHipoteca();
        MisPropiedadesJDialog visualizarPropieades = new MisPropiedadesJDialog(this.FramePrincipal, true, jugadoresDelTablero, casillasDelTablero, jugadorDelTurno,porcentajeHipoteca);
        visualizarPropieades.setVisible(true);
        this.actualizarDineroJugador(jugadorDelTurno);
    }//GEN-LAST:event_VerMisPropiedadesjButtonActionPerformed

    private void BancaRotajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BancaRotajButtonActionPerformed
        //activa el estado de bancarrota en el jugaor y existe una confirmaciond e la accion del jugador
        int opcion = JOptionPane.showConfirmDialog(this.FramePrincipal, "Seguro de declarar banca rota");
        if(opcion==JOptionPane.YES_OPTION)
        {
            String nombreJugador = NombreJuTurnojLabel.getText();
            Jugador jugadorDelTurno =this.partidaCargada.getJugadoresDeLaPartida().retornarJugador(nombreJugador);
            this.partidaCargada.eliminarRastroJugador(jugadorDelTurno);
        }
    }//GEN-LAST:event_BancaRotajButtonActionPerformed

    private void TerminarJuegojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TerminarJuegojButtonActionPerformed
        //realiza las accciones de finalizar partida y encontrar un ganador en el juego
        activacionReloj=false;
        logicaDeBusquedaDeGanador();
        guardarPartida();
        actualizarRanking();
        accionesFinalizarPartida();
    }//GEN-LAST:event_TerminarJuegojButtonActionPerformed
    private void logicaDeBusquedaDeGanador()
    {
        //EXTRAEMOS UN JUGADOR PARA COMPARAR QUIEN ES EL JUGADOR GANADOR
        Jugador temporal = this.partidaCargada.getJugadoresDeLaPartida().getRaiz();
        String nombreGanador = temporal.getNombreJugador();
        String nombreGanadorTemporal = "";
        float dineroGanadorTemporal =0;
        float dineroGanador = temporal.getFondos()+this.partidaCargada.precioBienes(temporal);
        int cantidadDeJugadores = this.partidaCargada.getJugadoresDeLaPartida().jugadoresIngresados();
        temporal=temporal.getJugadorSiguiente();
        //SE FORMA UN CIVLO CON LA CANTIDAD DE JUGADORES QUE HAY EN LA PARTIDA Y COMPARAMOS EL FONDO MONERIRO QUE POSEE CADA JUGADOR
        for (int i = 0; i < cantidadDeJugadores; i++) {
            nombreGanadorTemporal=temporal.getNombreJugador();
            dineroGanadorTemporal=temporal.getFondos()+this.partidaCargada.precioBienes(temporal);
            //SI LA CANTIDA DE DINERO ES MAYOR ENTONCES GUARDAMOS AL JUGADOR QUE POSEE MAS DINERO Y AVANZAMOS AL SIGUINETE JUGADOR
            if(dineroGanadorTemporal>=dineroGanador)
            {
                dineroGanador=dineroGanadorTemporal;
                nombreGanador=nombreGanadorTemporal;
            }
            temporal=temporal.getJugadorSiguiente();
        }
        this.partidaCargada.setEstadoDePartida(true);
        JOptionPane.showMessageDialog(this.FramePrincipal, "El jugador Ganador es: "+nombreGanador+"\nCon un fondo monetario de: Q."+dineroGanador);
        this.partidaCargada.setEstadoDePartida(true);
    }
    /**
     * ACCIONES QEU REALIZR EL FINALIZAR LA PARTIDA DEL JUEGO
     */
    private void accionesFinalizarPartida()
    {
        //SE LANZA UN AE¿VENTANA EMERGENTE Y SEGUN LA OPCION DE SELEECION SE HACE UN METODO U OTRO
        Object[] options = { "Jugar de nuevo", "Seleccionar otra partida","Finalizar Programa" };
        int resultado = (Integer)JOptionPane.showOptionDialog(null, "Partida Finalizada que desea hacer", "Juego Finalizado",JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE,null, options, options[0]);
        if(resultado==0)
        {
            this.partidaCargada.reinicioPartida();
            JOptionPane.showMessageDialog(this, "La partida a vuelto a empezar");
            
            actualizarDineroJugador(this.partidaCargada.getJugadoresDeLaPartida().getRaiz());
            NombreJuTurnojLabel.setText(this.partidaCargada.getJugadoresDeLaPartida().getRaiz().getNombreJugador());
            actualizarEstadoJugadores();
            
            this.activacionReloj=true;
            configuracionDeTiempo();
        }
        if(resultado==1)
        {
            this.activacionReloj=false;
            this.dispose();
            this.FramePrincipal.habilitarPestanaJuego(true);
            this.FramePrincipal.cargarJuego();
        }
        if(resultado==2)
        {
            this.activacionReloj=false;
            this.dispose();
            this.FramePrincipal.habilitarPestanaJuego(true);
            this.FramePrincipal.dispose();
        }
    }
    /**
     * Escribe los datos de la partida y la guarda en las carpetas correspondientes
     */
    private void guardarPartida(){
       EscrituraObjeto escribirObjeto = new EscrituraObjeto(this.directorioDeGuardado);
        try {
            escribirObjeto.WriteSerealizacion(this.partidaCargada.getTableroDeJuego() ,this.partidaCargada.getNombreDeLaPartida(), this.partidaCargada.getNombreDeLaPartida());
            escribirObjeto.WriteSerealizacion(this.partidaCargada, this.partidaCargada.getNombreDeLaPartida(), this.partidaCargada.getNombreDeLaPartida());
        } catch (ObjectNotSerializableExeption ex) {
            Logger.getLogger(EditarMapaJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(EditarMapaJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    /**
     * PROGRAMACION DEL TIEMPO EN LA PARTIDA DEL JUEGO
     */
    private void configuracionDeTiempo()
    {
        ///Se lanza una ventamna emergente que pregunta si se desea programa tiempo de duracion de la misma
        int respuesta = JOptionPane.showConfirmDialog(this, "Desea programar un tiempo para el termino de la partida");

        if(respuesta==JOptionPane.YES_OPTION)
        {   
            //si la respuesta es correcta entoneces se hace un fitro para que lo unico que se reciba es un entero
            int asignacionTiempo = 0; 
            do {
                
                String asignacion = JOptionPane.showInputDialog(this,"Ingrese la cantidad de minutos de la duracion de la partida");
                try {
                    asignacionTiempo = Integer.valueOf(asignacion);
                } catch (Exception e) {
                }
            } while (asignacionTiempo==0);
            //se asigan el nuemro al meto de relojDelJuego
            this.LeyendaTiempojLabel.setText("Tiempo restante");
            relojDeJuego(asignacionTiempo-1,59,true);
        }
        else
        {
            //de lo contrio solo el reloj mostrara la continuacion de la partida
            this.LeyendaTiempojLabel.setText("Tiempo de Juego");
            relojDeJuego(0,0,false);
            
        }
    }
    /**
     * Funcionalidades de reloj
     */
    private void relojDeJuego(int minutosAsignados, int segundosAsignados,boolean conteoRegresivo)
    {
        Runnable reloj = new Runnable() {
            @Override
            public void run() {
                int minutos=minutosAsignados;
                int segundos = segundosAsignados;
                int jugadoresSinBancaRota=0; 
                int jugadorPropiedades=0;
                do {                    
                    String hora =minutos +" : "+ segundos;
                    HorajLabel.setText(hora);
                    jugadoresSinBancaRota = partidaCargada.contarJugadoresSinBancaRota();
                    jugadorPropiedades = partidaCargada.jugadorConTodasLasPropiedades();
                    if(conteoRegresivo==false)
                    {
                        segundos++;
                        if(segundos==60)
                        {
                            segundos=0;
                            minutos++;
                        }
                    }
                    if(conteoRegresivo==true)
                    {
                        if(minutos>=0&&segundos>0)
                        {
                            segundos--;
                            if(segundos==0)
                            {
                                if(minutos>0)
                                {
                                    segundos=59;
                                    minutos--;
                                }
                                
                            }
                            
                        }
                        if(minutos==0&&segundos==0)
                        {
                            activacionReloj=false;
                        }
                    }
                    if(jugadoresSinBancaRota==1)
                    {
                        activacionReloj=false;
                        minutos=0;
                        segundos=0;
                    }
                    if(jugadorPropiedades==28)
                    {
                        activacionReloj=false;
                        minutos=0;
                        segundos=0;
                    }
                    esperarTiempo(1);
                } while (activacionReloj);
                /**
                 * Funcionamiento cuando el reloj llega a 0
                 */
                if(minutos==0&&segundos==0)
                {
                    activacionReloj=false;
                    minutos=0;
                    segundos=0;
                    JOptionPane.showMessageDialog(null, "La partida ah terminado acontinuacion se mostrara el jugador ganador");
                    logicaDeBusquedaDeGanador();
                    guardarPartida();
                    actualizarRanking();
                    accionesFinalizarPartida();
                }
            }
            /**
             * Realiza una pausa el hilo de ejecucion
             */
            private void esperarTiempo(int segundos){
                try {
			Thread.sleep(segundos * 1000);
		} catch (InterruptedException ex) {
			Thread.currentThread().interrupt();
		}
            }
        };
        
        Thread hiloReloj = new Thread(reloj);
        hiloReloj.start();
    }
    /**
     * Muesta en pantalla el reusltado de los dados lanzados
     * @param numeroDeDado Indica el asignacion numerica del dado
     * @param resultado Indica el entero resultado del dado
     */
    public void resultadoDado(int numeroDeDado,int resultado){
        if(numeroDeDado==1)
        {
            Dado1jTextField.setText(String.valueOf(resultado));
        }
        if(numeroDeDado==2)
        {
            Dado2jTextField.setText(String.valueOf(resultado));
        }
        if(numeroDeDado==3)
        {
            Dado3jTextField.setText(String.valueOf(resultado));
        }
    }
    public JTextField[][] creacionMatriz(){
      JTextField[][] casillasGraficas = new JTextField[2][40];
      //SE GUARDAN TODOS LOS TEXTFIELD
      //
      casillasGraficas[0][0]=this.casn1;
      casillasGraficas[1][0]=this.casp1;
      //
      casillasGraficas[0][1]=this.casn2;
      casillasGraficas[1][1]=this.casp2;
      //
      casillasGraficas[0][2]=this.casn3;
      casillasGraficas[1][2]=this.casp3;
      //
      casillasGraficas[0][3]=this.casn4;
      casillasGraficas[1][3]=this.casp4;
      //
      casillasGraficas[0][4]=this.casn5;
      casillasGraficas[1][4]=this.casp5;
      //
      casillasGraficas[0][5]=this.casn6;
      casillasGraficas[1][5]=this.casp6;
      //
      casillasGraficas[0][6]=this.casn7;
      casillasGraficas[1][6]=this.casp7;
      //
      casillasGraficas[0][7]=this.casn8;
      casillasGraficas[1][7]=this.casp8;
      //
      casillasGraficas[0][8]=this.casn9;
      casillasGraficas[1][8]=this.casp9;
      //
      casillasGraficas[0][9]=this.casn10;
      casillasGraficas[1][9]=this.casp10;
      //
      casillasGraficas[0][10]=this.casn11;
      casillasGraficas[1][10]=this.casp11;
      //
      casillasGraficas[0][11]=this.casn12;
      casillasGraficas[1][11]=this.casp12;
      //
      casillasGraficas[0][12]=this.casn13;
      casillasGraficas[1][12]=this.casp13;
      //
      casillasGraficas[0][13]=this.casn14;
      casillasGraficas[1][13]=this.casp14;
      //
      casillasGraficas[0][14]=this.casn15;
      casillasGraficas[1][14]=this.casp15;
      //
      casillasGraficas[0][15]=this.casn16;
      casillasGraficas[1][15]=this.casp16;
      //
      casillasGraficas[0][16]=this.casn17;
      casillasGraficas[1][16]=this.casp17;
      //
      casillasGraficas[0][17]=this.casn18;
      casillasGraficas[1][17]=this.casp18;
      //
      casillasGraficas[0][18]=this.casn19;
      casillasGraficas[1][18]=this.casp19;
      //
      casillasGraficas[0][19]=this.casn20;
      casillasGraficas[1][19]=this.casp20;
      //
      casillasGraficas[0][20]=this.casn21;
      casillasGraficas[1][20]=this.casp21;
      //
      casillasGraficas[0][21]=this.casn22;
      casillasGraficas[1][21]=this.casp22;
      //
      casillasGraficas[0][22]=this.casn23;
      casillasGraficas[1][22]=this.casp23;
      //
      casillasGraficas[0][23]=this.casn24;
      casillasGraficas[1][23]=this.casp24;
      //
      casillasGraficas[0][24]=this.casn25;
      casillasGraficas[1][24]=this.casp25;
      //
      casillasGraficas[0][25]=this.casn26;
      casillasGraficas[1][25]=this.casp26;
      //
      casillasGraficas[0][26]=this.casn27;
      casillasGraficas[1][26]=this.casp27;
      //
      casillasGraficas[0][27]=this.casn28;
      casillasGraficas[1][27]=this.casp28;
      //
      casillasGraficas[0][28]=this.casn29;
      casillasGraficas[1][28]=this.casp29;
      //
      casillasGraficas[0][29]=this.casn30;
      casillasGraficas[1][29]=this.casp30;
      //
      casillasGraficas[0][30]=this.casn31;
      casillasGraficas[1][30]=this.casp31;
      //
      casillasGraficas[0][31]=this.casn32;
      casillasGraficas[1][31]=this.casp32;
      //
      casillasGraficas[0][32]=this.casn33;
      casillasGraficas[1][32]=this.casp33;
      //
      casillasGraficas[0][33]=this.casn34;
      casillasGraficas[1][33]=this.casp34;
      //
      casillasGraficas[0][34]=this.casn35;
      casillasGraficas[1][34]=this.casp35;
      //
      casillasGraficas[0][35]=this.casn36;
      casillasGraficas[1][35]=this.casp36;
      //
      casillasGraficas[0][36]=this.casn37;
      casillasGraficas[1][36]=this.casp37;
      //
      casillasGraficas[0][37]=this.casn38;
      casillasGraficas[1][37]=this.casp38;
      //
      casillasGraficas[0][38]=this.casn39;
      casillasGraficas[1][38]=this.casp39;
      //
      casillasGraficas[0][39]=this.casn40;
      casillasGraficas[1][39]=this.casp40;
      //
      return casillasGraficas;
    }
    /**
     * PINTA LAS CASILLAS DEL TABLERO SEGUN EL TIPO DE INSTANCIA
     */
    public void pintarTablero(){
        Casillas casillasPintar = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero().getRaiz();
        //UN CICLO QUE ABANZA EN TODAS LAS CASILLAS DEL TABLERO E IDENTIFICA EL TIPO DE INSTANCIA PARA DARLE UN COLOR
        for (int i = 0; i < 40; i++) {
            this.casillasGraficas[0][i].setText(casillasPintar.getNombreCasilla());
            if(casillasPintar instanceof CasillaPropiedad)
            {
                float precioPropiedad = ((CasillaPropiedad) casillasPintar).getPrecioCompra();
                String precio = String.valueOf(precioPropiedad);
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                if((casillasPintar instanceof CasillaPropiedadEstacion)||(casillasPintar instanceof CasillaPropiedadServicioBasico)){
                    this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
                }
                this.casillasGraficas[1][i].setFont(new java.awt.Font("Ubuntu", 1, 18));
                this.casillasGraficas[1][i].setText("Q. "+precio);
            }
            if(casillasPintar instanceof CasillaTrampaPagarMulta)
            {
                float multaPagar = ((CasillaTrampaPagarMulta) casillasPintar).getMultaPagar();
                String multa = String.valueOf(multaPagar);
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setFont(new java.awt.Font("Ubuntu", 1, 10));
                this.casillasGraficas[1][i].setText("Pague Q. "+multa);
            }
            if(casillasPintar instanceof CasillaTomaTarjeta)
            {
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
            }
            if(casillasPintar instanceof CasillaInicio)
            {
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
            }
            if(casillasPintar instanceof CasillaCarcel)
            {
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
            }
            if(casillasPintar instanceof CasillaNeutral)
            {
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
            }
            if(casillasPintar instanceof CasillaTrampaCambiarCasilla)
            {
                this.casillasGraficas[0][i].setBackground(asignarColor(casillasPintar));
                this.casillasGraficas[1][i].setBackground(asignarColor(casillasPintar));
            }
            casillasPintar = casillasPintar.getCasillaSiguiente();
        }
    }
    /**
     * CARGA LOS DATOS DEL JUGADOR EN PANTALLA UBICACION Y NOMBRE, ESTE METODO DEPENDE DE LA CANTIDAD DE JUGADORES QUE HAY EN LA PARTIDA DEL JUEGO
     */
    private void cargaEstadoJugadores(){
        ListaJugadores jugadoresCargados = this.partidaCargada.getJugadoresDeLaPartida();
        int cantidadDeJugadoresHabilitar=jugadoresCargados.jugadoresIngresados();
        Jugador nombreJugador = this.partidaCargada.getJugadoresDeLaPartida().getRaiz();
        if(cantidadDeJugadoresHabilitar==2){
            Jugador1jLabel.setText(nombreJugador.getNombreJugador());
            Jugador1jLabel.setVisible(true);
            jLabel11.setVisible(true);
            casillaJugador1.setVisible(true);
            nombreJugador=nombreJugador.getJugadorSiguiente();
            //
            Jugador2jLabel.setText(nombreJugador.getNombreJugador());
            Jugador2jLabel.setVisible(true);
            jLabel12.setVisible(true);
            casillaJugador2.setVisible(true);
        }
        if(cantidadDeJugadoresHabilitar==3){
            Jugador1jLabel.setText(nombreJugador.getNombreJugador());
            Jugador1jLabel.setVisible(true);
            jLabel11.setVisible(true);
            casillaJugador1.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador2jLabel.setText(nombreJugador.getNombreJugador());
            Jugador2jLabel.setVisible(true);
            jLabel12.setVisible(true);
            casillaJugador2.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador3jLabel.setText(nombreJugador.getNombreJugador());
            Jugador3jLabel.setVisible(true);
            jLabel13.setVisible(true);
            casillaJugador3.setVisible(true);
        }
        if(cantidadDeJugadoresHabilitar==4){
            Jugador1jLabel.setText(nombreJugador.getNombreJugador());
            Jugador1jLabel.setVisible(true);
            jLabel11.setVisible(true);
            casillaJugador1.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador2jLabel.setText(nombreJugador.getNombreJugador());
            Jugador2jLabel.setVisible(true);
            jLabel12.setVisible(true);
            casillaJugador2.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador3jLabel.setText(nombreJugador.getNombreJugador());
            Jugador3jLabel.setVisible(true);
            jLabel13.setVisible(true);
            casillaJugador3.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador4jLabel.setText(nombreJugador.getNombreJugador());
            Jugador4jLabel.setVisible(true);
            jLabel14.setVisible(true);
            casillaJugador4.setVisible(true);
        }
        if(cantidadDeJugadoresHabilitar==5){
            Jugador1jLabel.setText(nombreJugador.getNombreJugador());
            Jugador1jLabel.setVisible(true);
            jLabel11.setVisible(true);
            casillaJugador1.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador2jLabel.setText(nombreJugador.getNombreJugador());
            Jugador2jLabel.setVisible(true);
            jLabel12.setVisible(true);
            casillaJugador2.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador3jLabel.setText(nombreJugador.getNombreJugador());
            Jugador3jLabel.setVisible(true);
            jLabel13.setVisible(true);
            casillaJugador3.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador4jLabel.setText(nombreJugador.getNombreJugador());
            Jugador4jLabel.setVisible(true);
            jLabel14.setVisible(true);
            casillaJugador4.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador5jLabel.setText(nombreJugador.getNombreJugador());
            Jugador5jLabel.setVisible(true);
            jLabel15.setVisible(true);
            casillaJugador5.setVisible(true);
        }
        if(cantidadDeJugadoresHabilitar==6){
            Jugador1jLabel.setText(nombreJugador.getNombreJugador());
            Jugador1jLabel.setVisible(true);
            jLabel11.setVisible(true);
            casillaJugador1.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador2jLabel.setText(nombreJugador.getNombreJugador());
            Jugador2jLabel.setVisible(true);
            jLabel12.setVisible(true);
            casillaJugador2.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador3jLabel.setText(nombreJugador.getNombreJugador());
            Jugador3jLabel.setVisible(true);
            jLabel13.setVisible(true);
            casillaJugador3.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador4jLabel.setText(nombreJugador.getNombreJugador());
            Jugador4jLabel.setVisible(true);
            jLabel14.setVisible(true);
            casillaJugador4.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador5jLabel.setText(nombreJugador.getNombreJugador());
            Jugador5jLabel.setVisible(true);
            jLabel15.setVisible(true);
            casillaJugador5.setVisible(true);
            //
            nombreJugador=nombreJugador.getJugadorSiguiente();
            Jugador6jLabel.setText(nombreJugador.getNombreJugador());
            Jugador6jLabel.setVisible(true);
            jLabel10.setVisible(true);
            casillaJugador6.setVisible(true);
        }
        
    }
    /**
     * ACTUALIZA EL ESTADO DEL JUGADOR EN PANTALLA LA PRINCIPALMENTE LA UBIUCACION DEL JUGADOR 
     */
    private void actualizarEstadoJugadores()
    {
        ListaJugadores jugadoresCargados = this.partidaCargada.getJugadoresDeLaPartida();
        int cantidadDeJugadoresHabilitar=jugadoresCargados.jugadoresIngresados();
        Jugador jugador = this.partidaCargada.getJugadoresDeLaPartida().getRaiz();
        ListaCasilla casillaUbicacion = this.partidaCargada.getTableroDeJuego().getCasillasDelTablero();
        if(cantidadDeJugadoresHabilitar==2){
            casillaJugador1.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador1.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador2.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador2.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
        }
        if(cantidadDeJugadoresHabilitar==3){
            casillaJugador1.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador1.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador2.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador2.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador3.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador3.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
        }
        if(cantidadDeJugadoresHabilitar==4){
            casillaJugador1.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador1.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador2.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador2.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador3.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador3.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador4.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador4.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
        }
        if(cantidadDeJugadoresHabilitar==5){
            casillaJugador1.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador1.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador2.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador2.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador3.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador3.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador4.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador4.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador5.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador5.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
        }
        if(cantidadDeJugadoresHabilitar==6){
            casillaJugador1.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador1.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador2.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador2.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador3.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador3.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador4.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador4.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador5.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador5.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
            //
            jugador=jugador.getJugadorSiguiente();
            casillaJugador6.setText(jugador.getNombreCasillaUbicacion());
            casillaJugador6.setBackground(asignarColor(casillaUbicacion.buscarCasilla(jugador.getNombreCasillaUbicacion())));
        }
    }
    /**
     * DESHABILITA LAS UBICACUIONE DE LOS JUGADORES
     */
    private void deshabilitarUbicacionJugadores(){
        Jugador1jLabel.setVisible(false);
        jLabel11.setVisible(false);
        casillaJugador1.setVisible(false);
        //
        Jugador2jLabel.setVisible(false);
        jLabel12.setVisible(false);
        casillaJugador2.setVisible(false);
        //
        Jugador3jLabel.setVisible(false);
        jLabel13.setVisible(false);
        casillaJugador3.setVisible(false);
        //
        Jugador4jLabel.setVisible(false);
        jLabel14.setVisible(false);
        casillaJugador4.setVisible(false);
        //
        Jugador5jLabel.setVisible(false);
        jLabel15.setVisible(false);
        casillaJugador5.setVisible(false);
        //
        Jugador6jLabel.setVisible(false);
        jLabel10.setVisible(false);
        casillaJugador6.setVisible(false);
    }
    /**
     * ASIGNACION DE LOS COLERES DE LA PARTIDA
     * @param casillaPintar casilla
     * @return  Color de casilla en rgb
     */
    public ColorUIResource asignarColor(Casillas casillaPintar){
        
        ColorUIResource colorAsignado=new ColorUIResource(255, 255, 255);
        
        if(casillaPintar instanceof CasillaPropiedadLugar)
        {
            String colorAsignadoCasilla  = ((CasillaPropiedadLugar)casillaPintar).getGrupoPropiedad();
            if(colorAsignadoCasilla.equals("Rojo")){
                colorAsignado = new ColorUIResource(209, 62, 30);
            }
            if(colorAsignadoCasilla.equals("Amarillo")){
                colorAsignado = new ColorUIResource(244, 241, 26);
            }
            if(colorAsignadoCasilla.equals("Cafe")){
                colorAsignado = new ColorUIResource(165, 92, 92);
            }
            if(colorAsignadoCasilla.equals("Naranja")){
                colorAsignado = new ColorUIResource(228, 135, 37);
            }
            if(colorAsignadoCasilla.equals("Verde Claro")){
                colorAsignado = new ColorUIResource(102, 247, 142);
            }
            if(colorAsignadoCasilla.equals("Azul")){
                colorAsignado = new ColorUIResource(61, 111, 245);
            }
            if(colorAsignadoCasilla.equals("Rosa")){
                colorAsignado = new ColorUIResource(250, 131, 236);
            }
            if(colorAsignadoCasilla.equals("Verde")){
                colorAsignado = new ColorUIResource(69, 213, 43);
            }
        }
        if((casillaPintar instanceof CasillaPropiedadEstacion)||(casillaPintar instanceof CasillaPropiedadServicioBasico)){
            colorAsignado = new ColorUIResource(111, 196, 197);
        }
        if(casillaPintar instanceof CasillaTrampaPagarMulta){
            colorAsignado = new ColorUIResource(241, 110, 110);
        }
        if(casillaPintar instanceof CasillaTomaTarjeta)
        {
            String grupoTarjeta = ((CasillaTomaTarjeta)casillaPintar).getGrupoDeTarjeta();
            if(grupoTarjeta.equals("Cupon"))
            {
                colorAsignado = new ColorUIResource(241, 179, 110);
            }
            if(grupoTarjeta.equals("Bolsa"))
            {
                colorAsignado = new ColorUIResource(241, 221, 110);
            }
        }
        if(casillaPintar instanceof CasillaInicio)
        {
            colorAsignado=(new ColorUIResource(189, 109, 241));
        }
        if(casillaPintar instanceof CasillaCarcel)
        {
            colorAsignado=(new ColorUIResource(137, 133, 140));
        }
        if(casillaPintar instanceof CasillaNeutral)
        {
            colorAsignado=(new ColorUIResource(146, 189, 255));
        }
        if(casillaPintar instanceof CasillaTrampaCambiarCasilla)
        {
            colorAsignado=(new ColorUIResource(42, 132, 94));
        }
        return colorAsignado;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BancaRotajButton;
    private javax.swing.JButton ConstruirjButton;
    private javax.swing.JTextField Dado1jTextField;
    private javax.swing.JTextField Dado2jTextField;
    private javax.swing.JTextField Dado3jTextField;
    private javax.swing.JLabel DineroJugadorTurnojLabel;
    private javax.swing.JButton GuardarjButton;
    private javax.swing.JLabel HorajLabel;
    private javax.swing.JLabel Jugador1jLabel;
    private javax.swing.JLabel Jugador2jLabel;
    private javax.swing.JLabel Jugador3jLabel;
    private javax.swing.JLabel Jugador4jLabel;
    private javax.swing.JLabel Jugador5jLabel;
    private javax.swing.JLabel Jugador6jLabel;
    private javax.swing.JButton LanzarDadosjButton;
    private javax.swing.JLabel LeyendaTiempojLabel;
    private javax.swing.JLabel NombreJuTurnojLabel;
    private javax.swing.JButton SalirjButton;
    private javax.swing.JButton TerminarJuegojButton;
    private javax.swing.JButton TerminarTurnojButton;
    private javax.swing.JButton VerMisPropiedadesjButton;
    private javax.swing.JTextField casillaJugador1;
    private javax.swing.JTextField casillaJugador2;
    private javax.swing.JTextField casillaJugador3;
    private javax.swing.JTextField casillaJugador4;
    private javax.swing.JTextField casillaJugador5;
    private javax.swing.JTextField casillaJugador6;
    private javax.swing.JTextField casn1;
    private javax.swing.JTextField casn10;
    private javax.swing.JTextField casn11;
    private javax.swing.JTextField casn12;
    private javax.swing.JTextField casn13;
    private javax.swing.JTextField casn14;
    private javax.swing.JTextField casn15;
    private javax.swing.JTextField casn16;
    private javax.swing.JTextField casn17;
    private javax.swing.JTextField casn18;
    private javax.swing.JTextField casn19;
    private javax.swing.JTextField casn2;
    private javax.swing.JTextField casn20;
    private javax.swing.JTextField casn21;
    private javax.swing.JTextField casn22;
    private javax.swing.JTextField casn23;
    private javax.swing.JTextField casn24;
    private javax.swing.JTextField casn25;
    private javax.swing.JTextField casn26;
    private javax.swing.JTextField casn27;
    private javax.swing.JTextField casn28;
    private javax.swing.JTextField casn29;
    private javax.swing.JTextField casn3;
    private javax.swing.JTextField casn30;
    private javax.swing.JTextField casn31;
    private javax.swing.JTextField casn32;
    private javax.swing.JTextField casn33;
    private javax.swing.JTextField casn34;
    private javax.swing.JTextField casn35;
    private javax.swing.JTextField casn36;
    private javax.swing.JTextField casn37;
    private javax.swing.JTextField casn38;
    private javax.swing.JTextField casn39;
    private javax.swing.JTextField casn4;
    private javax.swing.JTextField casn40;
    private javax.swing.JTextField casn5;
    private javax.swing.JTextField casn6;
    private javax.swing.JTextField casn7;
    private javax.swing.JTextField casn8;
    private javax.swing.JTextField casn9;
    private javax.swing.JTextField casp1;
    private javax.swing.JTextField casp10;
    private javax.swing.JTextField casp11;
    private javax.swing.JTextField casp12;
    private javax.swing.JTextField casp13;
    private javax.swing.JTextField casp14;
    private javax.swing.JTextField casp15;
    private javax.swing.JTextField casp16;
    private javax.swing.JTextField casp17;
    private javax.swing.JTextField casp18;
    private javax.swing.JTextField casp19;
    private javax.swing.JTextField casp2;
    private javax.swing.JTextField casp20;
    private javax.swing.JTextField casp21;
    private javax.swing.JTextField casp22;
    private javax.swing.JTextField casp23;
    private javax.swing.JTextField casp24;
    private javax.swing.JTextField casp25;
    private javax.swing.JTextField casp26;
    private javax.swing.JTextField casp27;
    private javax.swing.JTextField casp28;
    private javax.swing.JTextField casp29;
    private javax.swing.JTextField casp3;
    private javax.swing.JTextField casp30;
    private javax.swing.JTextField casp31;
    private javax.swing.JTextField casp32;
    private javax.swing.JTextField casp33;
    private javax.swing.JTextField casp34;
    private javax.swing.JTextField casp35;
    private javax.swing.JTextField casp36;
    private javax.swing.JTextField casp37;
    private javax.swing.JTextField casp38;
    private javax.swing.JTextField casp39;
    private javax.swing.JTextField casp4;
    private javax.swing.JTextField casp40;
    private javax.swing.JTextField casp5;
    private javax.swing.JTextField casp6;
    private javax.swing.JTextField casp7;
    private javax.swing.JTextField casp8;
    private javax.swing.JTextField casp9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField20;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        
    }
}
