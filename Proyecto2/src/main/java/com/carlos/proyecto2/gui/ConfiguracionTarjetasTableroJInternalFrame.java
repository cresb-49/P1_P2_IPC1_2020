/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carlos.proyecto2.gui;

import com.carlos.proyecto2.Casillas.ListaCasilla;
import java.io.FileNotFoundException;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.carlos.proyecto2.Tablero.*;
import com.carlos.proyecto2.Tarjetas.*;
import com.carlos.proyecto2.EscrituraLecturaArchivos.EscrituraObjeto;
import com.carlos.proyecto2.Excepciones.ObjectNotSerializableExeption;
import com.carlos.proyecto2.Partida.*;
import java.util.*;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author benjamin
 */
public class ConfiguracionTarjetasTableroJInternalFrame extends javax.swing.JInternalFrame implements ChangeListener{

    private String directorioDeGuardado;
    private Partida partidaCargada;
    private MainFrame FramePrincipal;
    private ListaTarjeta tarjetasCreadasCupon=new ListaTarjeta();
    private ListaTarjeta tarjetasCreadasBolsa=new ListaTarjeta();
    private int cuponesGenerados=0;
    private int bolsasGeneradas=0;
    private int tipoConstructor=0;
    /**
     * Creates new form ConfiguracionTableroJInternalFrame
     */
    public ConfiguracionTarjetasTableroJInternalFrame(String directorioDeGuardado,Partida partidaCargada,MainFrame FramePrincipal) {
        this.directorioDeGuardado = directorioDeGuardado;
        this.FramePrincipal=FramePrincipal;
        this.partidaCargada = partidaCargada;
        this.tipoConstructor=1;
        initComponents();
        habilitarChangeListener();
        EliminarTarjetasjButton.setVisible(false);
        CerarjToggleButton.setVisible(false);
    }
    private Tablero tableroCargado;
    /**
     * Configuracion grafica de tarjetas
     * @param directorioDeGuardado directorio de guardado
     * @param partidaCargada    partida cargada
     * @param tableroCargado    tablero cargado
     * @param FramePrincipal    frame de origen
     */
    public ConfiguracionTarjetasTableroJInternalFrame(String directorioDeGuardado,Partida partidaCargada,Tablero tableroCargado,MainFrame FramePrincipal) {
        this.FramePrincipal=FramePrincipal;
        this.directorioDeGuardado = directorioDeGuardado;
        this.partidaCargada = partidaCargada;
        this.tableroCargado=tableroCargado;
        this.tipoConstructor=2;
        initComponents();
        habilitarChangeListener();
        cargarTarjetas();
        EliminarTarjetasjButton.setVisible(true);
        EliminarTarjetasjButton.setEnabled(true);
        CerarjToggleButton.setVisible(true);
        CerarjToggleButton.setEnabled(true);
    }
    /**
     * carga de tarjetas en las variables del tablero
     */
    private void cargarTarjetas(){
        this.tarjetasCreadasBolsa=this.tableroCargado.getTarjetasBolsa();
        this.tarjetasCreadasCupon=this.tableroCargado.getTarjetasCupon();
        
        this.bolsasGeneradas=this.tableroCargado.getTarjetasBolsa().contarBaraja();
        this.cuponesGenerados=this.tableroCargado.getTarjetasCupon().contarBaraja();
        CuponesjLabel.setText(String.valueOf(cuponesGenerados));
        BolsasjLabel.setText(String.valueOf(bolsasGeneradas));
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpcionesConfiguracionbuttonGroup = new javax.swing.ButtonGroup();
        RecibirPagarbuttonGroup = new javax.swing.ButtonGroup();
        jLabel3 = new javax.swing.JLabel();
        ConfiguracionPorDefectojCheckBox = new javax.swing.JCheckBox();
        ConfiguraionManualjCheckBox = new javax.swing.JCheckBox();
        ValidarTarjetajButton = new javax.swing.JButton();
        TipoTarjetajComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        AleatoriojButton = new javax.swing.JButton();
        FinalizarjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        BolsasjLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        CuponesjLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        ColeccionjComboBox = new javax.swing.JComboBox<>();
        EliminarTarjetasjButton = new javax.swing.JButton();
        CerarjToggleButton = new javax.swing.JToggleButton();

        jLabel3.setText("Tarjetas en el tablero");

        OpcionesConfiguracionbuttonGroup.add(ConfiguracionPorDefectojCheckBox);
        ConfiguracionPorDefectojCheckBox.setText("Por defecto");

        OpcionesConfiguracionbuttonGroup.add(ConfiguraionManualjCheckBox);
        ConfiguraionManualjCheckBox.setText("Manual");

        ValidarTarjetajButton.setText("Ir al editor");
        ValidarTarjetajButton.setEnabled(false);
        ValidarTarjetajButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ValidarTarjetajButtonActionPerformed(evt);
            }
        });

        TipoTarjetajComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cupon", "Bolsa" }));
        TipoTarjetajComboBox.setEnabled(false);

        jLabel4.setText("Tipo tarjeta");

        jLabel7.setText("Configuracion Manual de Tarjeta");

        jLabel5.setText("Numero De tarjetas Creadas:");

        AleatoriojButton.setText("Crear aleatoria");
        AleatoriojButton.setEnabled(false);
        AleatoriojButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AleatoriojButtonActionPerformed(evt);
            }
        });

        FinalizarjButton.setText("Finalizar");
        FinalizarjButton.setEnabled(false);
        FinalizarjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalizarjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Bolsa");

        BolsasjLabel.setText("0");

        jLabel9.setText("Cupon:");

        CuponesjLabel.setText("0");

        jLabel11.setText("Coleccion");

        ColeccionjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ir a carcel", "Mover a casilla", "Multa", "Pago a jugadores", "Perder turno", "Premio", "Salir Carcel", "Personalizada" }));
        ColeccionjComboBox.setEnabled(false);
        ColeccionjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColeccionjComboBoxActionPerformed(evt);
            }
        });

        EliminarTarjetasjButton.setText("Eliminar todas las tarjetas");
        EliminarTarjetasjButton.setEnabled(false);
        EliminarTarjetasjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarTarjetasjButtonActionPerformed(evt);
            }
        });

        CerarjToggleButton.setText("Cerrar");
        CerarjToggleButton.setEnabled(false);
        CerarjToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerarjToggleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(59, 59, 59)
                        .addComponent(ConfiguracionPorDefectojCheckBox)
                        .addGap(30, 30, 30)
                        .addComponent(ConfiguraionManualjCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel5)
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(BolsasjLabel)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(CuponesjLabel)))
                .addContainerGap(128, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(TipoTarjetajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AleatoriojButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(18, 18, 18)
                        .addComponent(ColeccionjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(EliminarTarjetasjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ValidarTarjetajButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(FinalizarjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(CerarjToggleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(ConfiguracionPorDefectojCheckBox)
                    .addComponent(ConfiguraionManualjCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel1)
                        .addComponent(BolsasjLabel))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CuponesjLabel)
                        .addComponent(jLabel9)))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TipoTarjetajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ColeccionjComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(EliminarTarjetasjButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel11))))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ValidarTarjetajButton)
                    .addComponent(FinalizarjButton)
                    .addComponent(AleatoriojButton)
                    .addComponent(CerarjToggleButton))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ColeccionjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColeccionjComboBoxActionPerformed
        String seleccion = (String)ColeccionjComboBox.getSelectedItem();
        //System.out.println(seleccion);
    }//GEN-LAST:event_ColeccionjComboBoxActionPerformed

    private void ValidarTarjetajButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ValidarTarjetajButtonActionPerformed
        // TODO add your handling code here:
        String tipoTarjeta = (String)ColeccionjComboBox.getSelectedItem();
        formularioDeCreacionTrajetaJPanel panel = new formularioDeCreacionTrajetaJPanel(tipoTarjeta, this);
        JOptionPane.showOptionDialog(this, panel, "Configuracion de tarjeta "+tipoTarjeta, JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"Cerrar"}, "opcion 1");
    }//GEN-LAST:event_ValidarTarjetajButtonActionPerformed
    /**
     * Accion del boton de generacion aleatoria
     */
    private void AleatoriojButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AleatoriojButtonActionPerformed
        // TODO add your handling code here:
        int intervalo =(int)Math.floor(Math.random()*(34-0+1)+0);
        //Segun el numero resultante se elige una tarjeta del fupo cupon o bolsa
        if (generacionAleatoria(intervalo).getGrupoTomaTarjeta().equals("Cupon")){
            cuponesGenerados++;
            CuponesjLabel.setText(String.valueOf(cuponesGenerados));
            this.tarjetasCreadasCupon.agregar(generacionAleatoria(intervalo));
        }
        if (generacionAleatoria(intervalo).getGrupoTomaTarjeta().equals("Bolsa")){
            bolsasGeneradas++;
            BolsasjLabel.setText(String.valueOf(bolsasGeneradas));
           this.tarjetasCreadasBolsa.agregar(generacionAleatoria(intervalo));
        }
        if(bolsasGeneradas>1&&cuponesGenerados>1){
            FinalizarjButton.setEnabled(true);
        }
    }//GEN-LAST:event_AleatoriojButtonActionPerformed
    /**
     * vacia la lista de tajetas del tablero cargado
     */
    private void EliminarTarjetasjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarTarjetasjButtonActionPerformed
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(this, "Se eliminaran todas las tarjetas del tablero\n    ¿desea continuar?","Advertencia",JOptionPane.WARNING_MESSAGE);
        if(opcion == JOptionPane.YES_OPTION){
            this.tableroCargado.getTarjetasBolsa().vaciarLista();
            this.tableroCargado.getTarjetasCupon().vaciarLista();;   
            this.tarjetasCreadasBolsa.vaciarLista();
            this.tarjetasCreadasCupon.vaciarLista();
            cuponesGenerados=0;
            bolsasGeneradas=0;
            CuponesjLabel.setText(String.valueOf(cuponesGenerados));
            BolsasjLabel.setText(String.valueOf(bolsasGeneradas));
            //CerarjToggleButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_EliminarTarjetasjButtonActionPerformed
    /**
     * cierra el farme de configuracion de trajetas
     */
    private void CerarjToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerarjToggleButtonActionPerformed
        // TODO add your handling code here:
        this.doDefaultCloseAction();
        this.FramePrincipal.habilitarPestanaJuego(true);
    }//GEN-LAST:event_CerarjToggleButtonActionPerformed
    /**
     * finalizacion se se inicia con el contructor no 1
     */
    private void FinalizarConstructor1(){
        if(ConfiguracionPorDefectojCheckBox.isSelected()){
            cargarTargetasPredefinidas();
        }
        else
        {
            cargarTarjetasCreadas();
        }
        guardarPartida();
        this.FramePrincipal.habilitarPestanaJuego(true);
        this.doDefaultCloseAction();
    }
    /**
     * finalizacion se se inicia con el contructor no 2
     */
    private void FinalizarConstructor2(){
        CerarjToggleButton.setEnabled(true);
        if(ConfiguracionPorDefectojCheckBox.isSelected()){
            cargarTargetasPredefinidasEdicon();
        }
        else
        {
            cargarTarjetasCreadas();
        }
        guardarPartida();
        this.FramePrincipal.habilitarPestanaJuego(true);
        this.doDefaultCloseAction();
    }
    /**
     * Accion del boton finalizar
     */
    private void FinalizarjButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_FinalizarjButtonActionPerformed
        // TODO add your handling code here:
        if(tipoConstructor==1){
            FinalizarConstructor1();
        }
        if(tipoConstructor==2){
            FinalizarConstructor2();
        }
    }// GEN-LAST:event_FinalizarjButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AleatoriojButton;
    private javax.swing.JLabel BolsasjLabel;
    private javax.swing.JToggleButton CerarjToggleButton;
    private javax.swing.JComboBox<String> ColeccionjComboBox;
    private javax.swing.JCheckBox ConfiguracionPorDefectojCheckBox;
    private javax.swing.JCheckBox ConfiguraionManualjCheckBox;
    private javax.swing.JLabel CuponesjLabel;
    private javax.swing.JButton EliminarTarjetasjButton;
    private javax.swing.JButton FinalizarjButton;
    private javax.swing.ButtonGroup OpcionesConfiguracionbuttonGroup;
    private javax.swing.ButtonGroup RecibirPagarbuttonGroup;
    private javax.swing.JComboBox<String> TipoTarjetajComboBox;
    private javax.swing.JButton ValidarTarjetajButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
    /**
     * se habilita la implentacion chnage listener par aleer los cambios en las labes del programa
     */
    private void habilitarChangeListener() {
        ConfiguracionPorDefectojCheckBox.addChangeListener(this);
        ConfiguraionManualjCheckBox.addChangeListener(this);
    }
    /**
     * Se habilitan campos graficos en el funcionamiento del formulario
     * @param estado estado de activacion
     */
    private void estadosDeCamposDeConfiguracion(boolean estado) {
        ValidarTarjetajButton.setEnabled(estado);
        AleatoriojButton.setEnabled(estado);
        TipoTarjetajComboBox.setEnabled(estado);
        ColeccionjComboBox.setEnabled(estado);
    }

    
    /**
     * Metodo para escirbir los acrhivos de la partida
     */
    private void guardarPartida() {
        //segun el uso de un contructor u otro se utilizar diferentes funciones para guardar la partida del juego
        if(this.tipoConstructor==1){
            EscrituraObjeto escritura = new EscrituraObjeto(this.directorioDeGuardado);
            try {
                escritura.WriteSerealizacion(this.partidaCargada, this.partidaCargada.getNombreDeLaPartida(),
                this.partidaCargada.getNombreDeLaPartida());
                escritura.WriteSerealizacion(this.partidaCargada.getTableroDeJuego(), this.partidaCargada.getTableroDeJuego().getNombreDelJuego(),
                this.partidaCargada.getTableroDeJuego().getNombreDelJuego());
            } catch (FileNotFoundException | ObjectNotSerializableExeption e) {
                e.printStackTrace();
            }
        }
        if(this.tipoConstructor==2){
            EscrituraObjeto escritura = new EscrituraObjeto(this.directorioDeGuardado);
            try {
                this.partidaCargada.setTableroDeJuego(this.tableroCargado);
                escritura.WriteSerealizacion(this.partidaCargada, this.partidaCargada.getNombreDeLaPartida(),this.partidaCargada.getNombreDeLaPartida());
                escritura.WriteSerealizacion(this.tableroCargado, this.tableroCargado.getNombreDelJuego(),this.tableroCargado.getNombreDelJuego());
            } catch (FileNotFoundException | ObjectNotSerializableExeption e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * Se cargan las tarjetas ya realizadas por defecto en el juego
     */
    private void cargarTargetasPredefinidas(){
        ListaTarjeta tarjetasdeCupon=new ListaTarjeta();
        ListaTarjeta tarjetasdeBolsa=new ListaTarjeta();
        for (int i = 0; i <= 17; i++) {
            tarjetasdeBolsa.agregar(generacionAleatoria(i));
        }
        
        for (int i = 18; i <= 34 ; i++) {
            tarjetasdeCupon.agregar(generacionAleatoria(i));
        }
        
        this.partidaCargada.getTableroDeJuego().setTarjetasBolsa(tarjetasdeBolsa);
        this.partidaCargada.getTableroDeJuego().setTarjetasCupon(tarjetasdeCupon);
    }
    /**
     * Se cargan trajetas predefinidas
     */
    private void cargarTargetasPredefinidasEdicon(){
        ListaTarjeta tarjetasdeCupon=new ListaTarjeta();
        ListaTarjeta tarjetasdeBolsa=new ListaTarjeta();
        for (int i = 0; i <= 17; i++) {
            tarjetasdeBolsa.agregar(generacionAleatoria(i));
        }
        
        for (int i = 18; i <= 34 ; i++) {
            tarjetasdeCupon.agregar(generacionAleatoria(i));
        }
        
        this.tableroCargado.setTarjetasBolsa(tarjetasdeBolsa);
        this.tableroCargado.setTarjetasCupon(tarjetasdeCupon);
    }
    /**
     * Se cargan tarjetas realizadas por el usuario
     */
    private void cargarTarjetasCreadas(){
        this.partidaCargada.getTableroDeJuego().setTarjetasBolsa(tarjetasCreadasBolsa);
        this.partidaCargada.getTableroDeJuego().setTarjetasCupon(tarjetasCreadasCupon);
    }
    /**
     * Recibe numero de opcion
     * @param opcion numero de tarjeta prestablecida
     * @return tarjeta predefinida
     */
    private Tarjetas generacionAleatoria(int opcion){
        Tarjetas[] tarjetaElegida= new Tarjetas[35];
        
        tarjetaElegida[0] = new TarjetaPremio("Bolsa","UNO DE SUS DEPARTAMENTOS GANA 1er. PREMIO\nEN CONCURSO DE TEJIDOS TIPICOS\nCOBRE Q.300 DEL BANCOPOLY", 300);
        tarjetaElegida[1] = new TarjetaPremio("Bolsa","RECIBE EL 50% DE SU AGUINALDO\nCOBRE Q.110 DEL BANCOPOLY",110);
        tarjetaElegida[2] = new TarjetaMulta("Bolsa", "¡EXCESO EN SU CONSUMO DE AGUA!\nPAGUE Q. 215 A EMPAGUA Pague al BANCOPOLY", 215);
        tarjetaElegida[3] = new TarjetaPremio("Bolsa", "SUSPENDIDO UN MES POR ENFERMEDAD RECIBE Q.50 DEL IGGS", 50);
        tarjetaElegida[4] = new TarjetaPremio("Bolsa", "¡LE TOCO SU CUCHUBAL! COBRE Q.75", 75);
        tarjetaElegida[5] = new TarjetaMulta("Bolsa", "¡MULTA!PRESENTACION EXTEMPORANEA DE SU DECLARACION\nDEL IMPUESTO SOBRE LA RENTA PAGUE Q.175 AL BANCOPOLY", 175);
        tarjetaElegida[6] = new TarjetaMovarACasilla("Bolsa", "¡AVANCE HASTA LA ENTRADA! COBRE Al BANCOPOLY POR SUELDO Y VIATICOS ", "Inicio");
        tarjetaElegida[7] = new TarjetaMulta("Bolsa", "INTRODUCCION DE AGUA POTABLE Y ELECTRIFICACION\nPAGUE Q.300 AL BANCOPOLY", 300);
        tarjetaElegida[8] = new TarjetaMulta("Bolsa", "EN SU PALTALON SE AH ENCONTRADO UN BILLETE DE Q.100", 100);
        tarjetaElegida[9] = new TarjetaMulta("Bolsa", "POR BOLETO DE ORNATO SOLVENCIA DE PARQUIMETROS\nY REPOSICION DE SU CEDULA DE VECINDAD\nPAGUE Q.230 A LA MUNICIPALIDAD *CAJA DE BANCOPOLY*", 230);
        tarjetaElegida[10] = new TarjetaMulta("Bolsa", "PAGUE Q.15 POR IMPUESTO DE SEÑALIZACION Y SEMAFOROS", 15);
        tarjetaElegida[11] = new TarjetaPremio("Bolsa","¡LOTERIA! SACA TERMINACION DE UNOS NUMEROS DE LA LOTERIA\nCOBRE Q.800 DEL BACOPOLY", 800);
        tarjetaElegida[12] = new TarjetaPremio("Bolsa","BONOS DE RECONSTRUCCION NACIONAL\nCOBRE Q.180 DEL BANCOPOLY POR INTERESES ACUMULADOS",180);
        tarjetaElegida[13] = new TarjetaCaminar("Bolsa", "ADELANTE SU PEON HASTA LA COMPAÑÍA DE TRANSPORTE MAS CERCANA\n(Si la compañía no tiene dueño puede comprarla)", "Adelante", "CasillaPropiedadEstacion");
        tarjetaElegida[14] = new TarjetaCarcel("Bolsa","¡VAYASE A LA CARCEL! SIN COBRAR EN LA ENTRADA");
        tarjetaElegida[15] = new TarjetaPremio("Bolsa", "RECIBE INTERESES DE SU CUENTA DE AHORROS\nEN EL BANCOPOLY COBRE Q.125", 125);
        tarjetaElegida[16] = new TarjetaMulta("Bolsa", "ENVIE Q.100 AL IGGS POR IMPUSTOS Y MULTA POR PAGO ATRASADO DE PLANILLAS (PAGUE AL BANCOPOLY)", 100);
        tarjetaElegida[17] = new TarjetaSalirCarcel("Bolsa", "GUARDE ESTA TARJETA HASTA QUE LA NECESITE O ¡VENDALA!\nLo autoriza a salir de la carcel");
        //Cupon
        tarjetaElegida[18] = new TarjetaMulta("Cupon", "FERIA DE LA LOCALIDAD PAGUE Q. 250 *COLABORACION PARA COHETILLOS Y MARIMBA*",250);
        tarjetaElegida[19] = new TarjetaMulta("Cupon", "FERIA DE LA LOCALIDAD PAGUE Q. 250 *COLABORACION PARA COHETILLOS Y MARIMBA*",250);
        tarjetaElegida[20] = new TarjetaPersonalizada("Cupon", "¡VIAJE GRATIS POR FLOMERCA! VAYASE HASTA ESCUINTLA COBRE AL BANCOPOLY POR VIATICOS",0, 0, 0, "Escuintla",0);
        tarjetaElegida[21] = new TarjetaCaminar("Cupon", "ADELANTE SU PEON HASTA LA COMPAÑÍA DE TRANSPORTE MAS CERCANA (Si la compañía no tiene dueño puede comprarla)", "Adelante", "CasillaPropiedadEstacion");
        tarjetaElegida[22] = new TarjetaCarcel("Cupon","¡VAYASE A LA CARCEL! SIN COBRAR EN LA ENTRADA");
        tarjetaElegida[23] = new TarjetaPersonalizada("Cupon", "¡VAYASE HASTA HUEHUETENANGO! Visite las ruinas de Zaculeu COBRE Q. 220 DE PASO *Conozca el Nacimiento del rio San Juan*", 200, 0, 0, "Huehuetengo",0);
        tarjetaElegida[24] = new TarjetaMovarACasilla("Cupon", "¡AVANCE HASTA LA ENTRADA! COBRE Al BANCOPOLY POR SUELDO Y VIATICOS ", "Inicio");
        tarjetaElegida[25] = new TarjetaPersonalizada("Cupon", "¡AVANCE HASTA SACATEPEQUEZ! (Visite San Felipe) COBRE SUS Q. 220 DE PASO", 200, 0, 0, "Sacatepequez",0);
        tarjetaElegida[26] = new TarjetaCaminar("Cupon", "ADELANTE SU PEON HASTA LA COMPAÑÍA DE SERVICIOS MAS CERCANA (Si la compañía no tiene dueño puede comprarla)", "Adelante", "CasillaPropiedadServicioBasico");
        tarjetaElegida[27] = new TarjetaMulta("Cupon", "EL ANILLO PERIFERICO NACIONAL HACE QUE REVALUEN SUS PROPIEDADES PAGUE Q. 250 POR TRAMITES ",250);
        tarjetaElegida[28] = new TarjetaPersonalizada("Cupon", "¡VUELE GRATIS! SE GANÒ UN VIAJE A PETEN CON GASTOS INCLUIDOS COBRE Q. 400 AL BANCOPOLY", 400, 0, 0, "Peten",0);
        tarjetaElegida[29] = new TarjetaPremio("Cupon", "UNO DE SUS DEPARTAMENTOS ESTÀ DE FERIA Y SUS VENTAS DE ARTESANIAS AUMENTÒ COBRE Q. 250", 250);
        tarjetaElegida[30] = new TarjetaMulta("Cupon", "¡OPERACIÓN ESCUELA! DONE Q. 300 PARA MOBILIARIO DE ESTABLECIMIENTOS EDUCATIVOS ", 300);
        tarjetaElegida[31] = new TarjetaPersonalizada("Cupon", "AVANCE HASTA IZABAL PAGUE Q.150 POR VALOR DE PEAJE AL PASAR SOBRE EL PUENTE", 0, 150, 0, "Izabal",0);
        tarjetaElegida[32] = new TarjetaMulta("Cupon", "¡REVISION DE SERVICIOS! PAGUE Q. 175 POR MANTENIMIENTO Y REVISION DE SERVICIOS ELECTRICOS ", 175);
        tarjetaElegida[33] = new TarjetaPremio("Cupon", "SE LE HA ESCOGIDO COMO COORDINADOR DEL INFOM *INSTITUTO DE FOMENTO MUNICIPAL* COBRE Q. 100 POR INCENTIVO LABORAL ", 100);
        tarjetaElegida[34] = new TarjetaSalirCarcel("Cupon", "GUARDE ESTA TARJETA HASTA QUE LA NECESITE O ¡VENDALA!\nLo autoriza a salir de la carcel");
        return tarjetaElegida[opcion];
    }
    /**
     * Almacenamiento de atrjetas creadas
     * @param tarjetaNueva tarjeta creada
     */
    public void generarTarjeta(Tarjetas tarjetaNueva){
        //segun el tipo de tarjeta se guarda en una lista u otra
        String tipoTarjeta = (String)TipoTarjetajComboBox.getSelectedItem();
        tarjetaNueva.setGrupoTomaTarjeta(tipoTarjeta);
        if(tipoTarjeta.equals("Cupon")){
            cuponesGenerados++;
            CuponesjLabel.setText(String.valueOf(cuponesGenerados));
            this.tarjetasCreadasCupon.agregar(tarjetaNueva);
        }
        if(tipoTarjeta.equals("Bolsa")){
           bolsasGeneradas++;
           BolsasjLabel.setText(String.valueOf(bolsasGeneradas));
           this.tarjetasCreadasBolsa.agregar(tarjetaNueva);
        }
        if(bolsasGeneradas>1&&cuponesGenerados>1){
            FinalizarjButton.setEnabled(true);
        }
    }

    @Override
    public void stateChanged(ChangeEvent ce) {
        
        if(ConfiguraionManualjCheckBox.isSelected()){
            estadosDeCamposDeConfiguracion(true);
            FinalizarjButton.setEnabled(false);
        }
        if(ConfiguracionPorDefectojCheckBox.isSelected()){
            estadosDeCamposDeConfiguracion(false);
            FinalizarjButton.setEnabled(true);
        }
    }
}
